{"candidate_pattern": "print\\(\"Result\\ of\\ eval:\",\\ eval\\(user_input\\)\\)", "example_context": "print(\"Result of eval:\", eval(user_input))", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/test.py", "line": 5, "severity": "High", "fix": "Avoid using eval; sanitize inputs."}
{"candidate_pattern": "print\\(eval\\(data\\)\\)\\ \\ \\#\\ This\\ is\\ very\\ unsafe!", "example_context": "print(eval(data))  # This is very unsafe!", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/test.py", "line": 14, "severity": "High", "fix": "Avoid using eval; sanitize inputs."}
{"candidate_pattern": "std::string\\ apiKey\\ =\\ \"API_KEY_12345\";", "example_context": "std::string apiKey = \"API_KEY_12345\";", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c++_tests/test_bad.c++", "line": 17, "severity": "High", "fix": "Move secrets to environment variables or a secrets manager."}
{"candidate_pattern": "//\\ Vulnerability\\ 1:\\ Buffer\\ overflow\\ with\\ gets\\(\\)", "example_context": "// Vulnerability 1: Buffer overflow with gets()", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c_tests/bad_test.c", "line": 24, "severity": "High", "fix": "Use fgets with size limits."}
{"candidate_pattern": "gets\\(input\\);\\ \\ //\\ unsafe", "example_context": "gets(input);  // unsafe", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c_tests/bad_test.c", "line": 26, "severity": "High", "fix": "Use fgets with size limits."}
{"candidate_pattern": "sprintf\\(cmd,\\ \"echo\\ Hello\\ %s\",\\ users\\[0\\]\\.username\\);\\ //\\ vulnerable\\ to\\ injection", "example_context": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c_tests/bad_test.c", "line": 34, "severity": "High", "fix": "Use snprintf with buffer limits."}
{"candidate_pattern": "String\\ query\\ =\\ \"SELECT\\ \\*\\ FROM\\ users\\ WHERE\\ username\\ =\\ '\"\\ \\+\\ input\\ \\+\\ \"';\";", "example_context": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/Bad_Test1.java", "line": 33, "severity": "High", "fix": "Use prepared statements instead of string concatenation."}
{"candidate_pattern": "String\\ query\\ =\\ \"SELECT\\ \\*\\ FROM\\ users\\ WHERE\\ username\\ =\\ '\"\\ \\+\\ username\\ \\+\\ \"';\";", "example_context": "String query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/BadTest1.java", "line": 8, "severity": "High", "fix": "Use prepared statements instead of string concatenation."}
{"candidate_pattern": "Runtime\\.getRuntime\\(\\)\\.exec\\(code\\);", "example_context": "Runtime.getRuntime().exec(code);", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/BadTest2.java", "line": 17, "severity": "High", "fix": "Avoid dynamic command execution; sanitize inputs."}
{"candidate_pattern": "if\\(isset\\(\\$_POST\\['username'\\]\\)\\ \\&\\&\\ isset\\(\\$_POST\\['password'\\]\\)\\)\\{", "example_context": "if(isset($_POST['username']) && isset($_POST['password'])){", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest1.php", "line": 4, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "\\$u\\ =\\ \\$_POST\\['username'\\];", "example_context": "$u = $_POST['username'];", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest1.php", "line": 5, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "\\$p\\ =\\ \\$_POST\\['password'\\];", "example_context": "$p = $_POST['password'];", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest1.php", "line": 6, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "if\\(isset\\(\\$_GET\\['file'\\]\\)\\)\\{", "example_context": "if(isset($_GET['file'])){", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest2.php", "line": 4, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "\\$filename\\ =\\ \\$_GET\\['file'\\];", "example_context": "$filename = $_GET['file'];", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest2.php", "line": 5, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "\\$prefs\\ =\\ unserialize\\(\\$_COOKIE\\['prefs'\\]\\);\\ //\\ unsafe\\ deserialization", "example_context": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest2.php", "line": 11, "severity": "High", "fix": "Avoid unserializing untrusted data."}
{"candidate_pattern": "if\\(isset\\(\\$_POST\\['username'\\]\\)\\ \\&\\&\\ isset\\(\\$_POST\\['password'\\]\\)\\)\\{", "example_context": "if(isset($_POST['username']) && isset($_POST['password'])){", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/GoodTest1.php", "line": 8, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "\\$stmt\\->bind_param\\(\"ss\",\\ \\$_POST\\['username'\\],\\ \\$_POST\\['password'\\]\\);\\ //\\ safe", "example_context": "$stmt->bind_param(\"ss\", $_POST['username'], $_POST['password']); // safe", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/GoodTest1.php", "line": 10, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "move_uploaded_file\\(\\$file\\['tmp_name'\\],\\ \\$uploadDir\\.\\$filename\\);", "example_context": "move_uploaded_file($file['tmp_name'], $uploadDir.$filename);", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/GoodTest2.php", "line": 9, "severity": "High", "fix": "Validate file type and path before moving."}
{"candidate_pattern": "\\$output\\ =\\ shell_exec\\(\\$_GET\\['cmd'\\]\\);\\ //\\ command\\ execution", "example_context": "$output = shell_exec($_GET['cmd']); // command execution", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/MixedTest1.php", "line": 13, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "if\\(isset\\(\\$_GET\\['cmd'\\]\\)\\)\\{", "example_context": "if(isset($_GET['cmd'])){", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/MixedTest1.php", "line": 12, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "\\$password\\ =\\ \"password123\";", "example_context": "$password = \"password123\";", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/MixedTest1.php", "line": 22, "severity": "High", "fix": "Do not store passwords in source code."}
{"candidate_pattern": "eval\\(user_code\\)\\ \\ \\#\\ Dangerous:\\ arbitrary\\ code\\ execution", "example_context": "eval(user_code)  # Dangerous: arbitrary code execution", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/Bad_Test1.py", "line": 15, "severity": "High", "fix": "Avoid using eval; sanitize inputs."}
{"candidate_pattern": "exec\\(command\\)\\ \\ \\#\\ Dangerous:\\ arbitrary\\ code\\ execution", "example_context": "exec(command)  # Dangerous: arbitrary code execution", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/Bad_Test1.py", "line": 20, "severity": "High", "fix": "Avoid using exec; sanitize inputs."}
{"candidate_pattern": "subprocess\\.run\\(cmd,\\ shell=True\\)\\ \\ \\#\\ shell=True\\ is\\ unsafe", "example_context": "subprocess.run(cmd, shell=True)  # shell=True is unsafe", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/Bad_Test1.py", "line": 39, "severity": "High", "fix": "Use list args and avoid shell=True."}
{"candidate_pattern": "data\\ =\\ pickle\\.load\\(f\\)\\ \\ \\#\\ Unsafe\\ if\\ file\\ is\\ untrusted", "example_context": "data = pickle.load(f)  # Unsafe if file is untrusted", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/Bad_Test1.py", "line": 33, "severity": "High", "fix": "Avoid deserializing untrusted input."}
{"candidate_pattern": "r\\ =\\ requests\\.get\\(\"https://example\\.com\",\\ verify=False\\)\\ \\ \\#\\ TLS\\ verification\\ disabled", "example_context": "r = requests.get(\"https://example.com\", verify=False)  # TLS verification disabled", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/Bad_Test1.py", "line": 43, "severity": "High", "fix": "Enable certificate verification."}
{"candidate_pattern": "Detected\\ dependency\\ reference\\ to\\ 'requests'", "example_context": "Detected dependency reference to 'requests'", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/Bad_Test1.py", "line": null, "severity": "High", "fix": "Ensure TLS verification is enabled and certificates are validated."}
{"candidate_pattern": "std::string\\ apiKey\\ =\\ \"API_KEY_12345\";", "example_context": "std::string apiKey = \"API_KEY_12345\";", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_c_tests_test_bad.c", "line": 17, "severity": "High", "fix": "Move secrets to environment variables or a secrets manager."}
{"candidate_pattern": "//\\ Vulnerability\\ 1:\\ Buffer\\ overflow\\ with\\ gets\\(\\)", "example_context": "// Vulnerability 1: Buffer overflow with gets()", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_c_tests_bad_test.c", "line": 24, "severity": "High", "fix": "Use fgets with size limits."}
{"candidate_pattern": "gets\\(input\\);\\ \\ //\\ unsafe", "example_context": "gets(input);  // unsafe", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_c_tests_bad_test.c", "line": 26, "severity": "High", "fix": "Use fgets with size limits."}
{"candidate_pattern": "sprintf\\(cmd,\\ \"echo\\ Hello\\ %s\",\\ users\\[0\\]\\.username\\);\\ //\\ vulnerable\\ to\\ injection", "example_context": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_c_tests_bad_test.c", "line": 34, "severity": "High", "fix": "Use snprintf with buffer limits."}
{"candidate_pattern": "String\\ query\\ =\\ \"SELECT\\ \\*\\ FROM\\ users\\ WHERE\\ username\\ =\\ '\"\\ \\+\\ input\\ \\+\\ \"';\";", "example_context": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_Bad_Test1.java", "line": 33, "severity": "High", "fix": "Use prepared statements instead of string concatenation."}
{"candidate_pattern": "String\\ query\\ =\\ \"SELECT\\ \\*\\ FROM\\ users\\ WHERE\\ username\\ =\\ '\"\\ \\+\\ username\\ \\+\\ \"';\";", "example_context": "String query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_java_test_project_BadTest1.java", "line": 8, "severity": "High", "fix": "Use prepared statements instead of string concatenation."}
{"candidate_pattern": "Runtime\\.getRuntime\\(\\)\\.exec\\(code\\);", "example_context": "Runtime.getRuntime().exec(code);", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_java_test_project_BadTest2.java", "line": 17, "severity": "High", "fix": "Avoid dynamic command execution; sanitize inputs."}
{"candidate_pattern": "if\\(isset\\(\\$_POST\\['username'\\]\\)\\ \\&\\&\\ isset\\(\\$_POST\\['password'\\]\\)\\)\\{", "example_context": "if(isset($_POST['username']) && isset($_POST['password'])){", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_BadTest1.php", "line": 4, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "\\$u\\ =\\ \\$_POST\\['username'\\];", "example_context": "$u = $_POST['username'];", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_BadTest1.php", "line": 5, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "\\$p\\ =\\ \\$_POST\\['password'\\];", "example_context": "$p = $_POST['password'];", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_BadTest1.php", "line": 6, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "if\\(isset\\(\\$_GET\\['file'\\]\\)\\)\\{", "example_context": "if(isset($_GET['file'])){", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_BadTest2.php", "line": 4, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "\\$filename\\ =\\ \\$_GET\\['file'\\];", "example_context": "$filename = $_GET['file'];", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_BadTest2.php", "line": 5, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "\\$prefs\\ =\\ unserialize\\(\\$_COOKIE\\['prefs'\\]\\);\\ //\\ unsafe\\ deserialization", "example_context": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_BadTest2.php", "line": 11, "severity": "High", "fix": "Avoid unserializing untrusted data."}
{"candidate_pattern": "if\\(isset\\(\\$_POST\\['username'\\]\\)\\ \\&\\&\\ isset\\(\\$_POST\\['password'\\]\\)\\)\\{", "example_context": "if(isset($_POST['username']) && isset($_POST['password'])){", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_GoodTest1.php", "line": 8, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "\\$stmt\\->bind_param\\(\"ss\",\\ \\$_POST\\['username'\\],\\ \\$_POST\\['password'\\]\\);\\ //\\ safe", "example_context": "$stmt->bind_param(\"ss\", $_POST['username'], $_POST['password']); // safe", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_GoodTest1.php", "line": 10, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "move_uploaded_file\\(\\$file\\['tmp_name'\\],\\ \\$uploadDir\\.\\$filename\\);", "example_context": "move_uploaded_file($file['tmp_name'], $uploadDir.$filename);", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_GoodTest2.php", "line": 9, "severity": "High", "fix": "Validate file type and path before moving."}
{"candidate_pattern": "\\$output\\ =\\ shell_exec\\(\\$_GET\\['cmd'\\]\\);\\ //\\ command\\ execution", "example_context": "$output = shell_exec($_GET['cmd']); // command execution", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_MixedTest1.php", "line": 13, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "if\\(isset\\(\\$_GET\\['cmd'\\]\\)\\)\\{", "example_context": "if(isset($_GET['cmd'])){", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_MixedTest1.php", "line": 12, "severity": "High", "fix": "Validate and sanitize all user input."}
{"candidate_pattern": "\\$password\\ =\\ \"password123\";", "example_context": "$password = \"password123\";", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_MixedTest1.php", "line": 22, "severity": "High", "fix": "Do not store passwords in source code."}
{"candidate_pattern": "eval\\(user_code\\)\\ \\ \\#\\ Dangerous:\\ arbitrary\\ code\\ execution", "example_context": "eval(user_code)  # Dangerous: arbitrary code execution", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_py_tests_Bad_Test1.py", "line": 15, "severity": "High", "fix": "Avoid using eval; sanitize inputs."}
{"candidate_pattern": "exec\\(command\\)\\ \\ \\#\\ Dangerous:\\ arbitrary\\ code\\ execution", "example_context": "exec(command)  # Dangerous: arbitrary code execution", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_py_tests_Bad_Test1.py", "line": 20, "severity": "High", "fix": "Avoid using exec; sanitize inputs."}
{"candidate_pattern": "subprocess\\.run\\(cmd,\\ shell=True\\)\\ \\ \\#\\ shell=True\\ is\\ unsafe", "example_context": "subprocess.run(cmd, shell=True)  # shell=True is unsafe", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_py_tests_Bad_Test1.py", "line": 39, "severity": "High", "fix": "Use list args and avoid shell=True."}
{"candidate_pattern": "data\\ =\\ pickle\\.load\\(f\\)\\ \\ \\#\\ Unsafe\\ if\\ file\\ is\\ untrusted", "example_context": "data = pickle.load(f)  # Unsafe if file is untrusted", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_py_tests_Bad_Test1.py", "line": 33, "severity": "High", "fix": "Avoid deserializing untrusted input."}
{"candidate_pattern": "r\\ =\\ requests\\.get\\(\"https://example\\.com\",\\ verify=False\\)\\ \\ \\#\\ TLS\\ verification\\ disabled", "example_context": "r = requests.get(\"https://example.com\", verify=False)  # TLS verification disabled", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_py_tests_Bad_Test1.py", "line": 43, "severity": "High", "fix": "Enable certificate verification."}
{"candidate_pattern": "Detected\\ dependency\\ reference\\ to\\ 'requests'", "example_context": "Detected dependency reference to 'requests'", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_py_tests_Bad_Test1.py", "line": null, "severity": "High", "fix": "Ensure TLS verification is enabled and certificates are validated."}
{"candidate_pattern": "print\\(\"Result\\ of\\ eval:\",\\ eval\\(user_input\\)\\)", "example_context": "print(\"Result of eval:\", eval(user_input))", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_py_tests_test.py", "line": 5, "severity": "High", "fix": "Avoid using eval; sanitize inputs."}
{"candidate_pattern": "print\\(eval\\(data\\)\\)\\ \\ \\#\\ This\\ is\\ very\\ unsafe!", "example_context": "print(eval(data))  # This is very unsafe!", "file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_py_tests_test.py", "line": 14, "severity": "High", "fix": "Avoid using eval; sanitize inputs."}
