{"file": "code_samples/0b214f4ba0c4efa0bc5c7028a4e80bce77639b895244da6a2dd17df87c53cbed.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 4, "reward": 1.0}}
{"file": "code_samples/0b214f4ba0c4efa0bc5c7028a4e80bce77639b895244da6a2dd17df87c53cbed.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$u = $_POST['username'];", "fix": "Validate and sanitize all user input.", "line": 5, "reward": 1.0}}
{"file": "code_samples/0b214f4ba0c4efa0bc5c7028a4e80bce77639b895244da6a2dd17df87c53cbed.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$p = $_POST['password'];", "fix": "Validate and sanitize all user input.", "line": 6, "reward": 1.0}}
{"file": "code_samples/0b214f4ba0c4efa0bc5c7028a4e80bce77639b895244da6a2dd17df87c53cbed.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Query: $query\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 8, "reward": 0.5}}
{"file": "code_samples/0b214f4ba0c4efa0bc5c7028a4e80bce77639b895244da6a2dd17df87c53cbed_BadTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 4, "reward": 1.0}}
{"file": "code_samples/0b214f4ba0c4efa0bc5c7028a4e80bce77639b895244da6a2dd17df87c53cbed_BadTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$u = $_POST['username'];", "fix": "Validate and sanitize all user input.", "line": 5, "reward": 1.0}}
{"file": "code_samples/0b214f4ba0c4efa0bc5c7028a4e80bce77639b895244da6a2dd17df87c53cbed_BadTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$p = $_POST['password'];", "fix": "Validate and sanitize all user input.", "line": 6, "reward": 1.0}}
{"file": "code_samples/0b214f4ba0c4efa0bc5c7028a4e80bce77639b895244da6a2dd17df87c53cbed_BadTest1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Query: $query\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 8, "reward": 0.5}}
{"file": "code_samples/0dcd114e8ad44896244a32a548e8b8e54bae0ccb237a3375b39a4a522a44a4cb.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/0dcd114e8ad44896244a32a548e8b8e54bae0ccb237a3375b39a4a522a44a4cb_GoodTest3.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/266df1ecc963f0f3e918fee3bc4df223b8493b9c10d34e5dab9c24892ce3b2e9.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/266df1ecc963f0f3e918fee3bc4df223b8493b9c10d34e5dab9c24892ce3b2e9_GoodTest2.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/2da6ec33ac8908ef3ce4a8f475881cd049ad04f78dafc9778ab691cdc23b57db.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/2da6ec33ac8908ef3ce4a8f475881cd049ad04f78dafc9778ab691cdc23b57db_GoodTest1.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 15, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866.py", "language": "Python", "finding": {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid exec(); restrict execution or remove.", "line": 20, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866.py", "language": "Python", "finding": {"type": "subprocess(..., shell=True)", "severity": "High", "problem_line": "subprocess.run(cmd, shell=True)  # shell=True is unsafe", "fix": "Use list args and avoid shell=True.", "line": 39, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866.py", "language": "Python", "finding": {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Do not unpickle untrusted data.", "line": 33, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866.py", "language": "Python", "finding": {"type": "TLS verification disabled", "severity": "High", "problem_line": "r = requests.get(\"https://example.com\", verify=False)  # TLS verification disabled", "fix": "Enable certificate verification.", "line": 43, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Avoid deserializing untrusted input.", "line": 33, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866.py", "language": "Python", "finding": {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866_Bad_Test1.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 15, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866_Bad_Test1.py", "language": "Python", "finding": {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid exec(); restrict execution or remove.", "line": 20, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866_Bad_Test1.py", "language": "Python", "finding": {"type": "subprocess(..., shell=True)", "severity": "High", "problem_line": "subprocess.run(cmd, shell=True)  # shell=True is unsafe", "fix": "Use list args and avoid shell=True.", "line": 39, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866_Bad_Test1.py", "language": "Python", "finding": {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Do not unpickle untrusted data.", "line": 33, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866_Bad_Test1.py", "language": "Python", "finding": {"type": "TLS verification disabled", "severity": "High", "problem_line": "r = requests.get(\"https://example.com\", verify=False)  # TLS verification disabled", "fix": "Enable certificate verification.", "line": 43, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866_Bad_Test1.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Avoid deserializing untrusted input.", "line": 33, "reward": 1.0}}
{"file": "code_samples/3f3da2a4dfc7d18c2fe7528ba53c788face83fbed5bdd5c00a8e20f03cce3866_Bad_Test1.py", "language": "Python", "finding": {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null, "reward": 1.0}}
{"file": "code_samples/41be20a3809ee4ad273c191ff205608245864b98ba4d3f3cb4eb26061d99d643.c", "language": "C", "finding": {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[*count].username, username, sizeof(users[*count].username) - 1);", "fix": "Ensure null-termination.", "line": 22, "reward": 0.2}}
{"file": "code_samples/41be20a3809ee4ad273c191ff205608245864b98ba4d3f3cb4eb26061d99d643_safe_test.c", "language": "C", "finding": {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[*count].username, username, sizeof(users[*count].username) - 1);", "fix": "Ensure null-termination.", "line": 22, "reward": 0.2}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71.php", "language": "PHP", "finding": {"type": "File read", "severity": "Medium", "problem_line": "$content = file_get_contents($filename); // unsafe: path traversal", "fix": "Validate input paths to prevent local file disclosure.", "line": 6, "reward": 0.5}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['file'])){", "fix": "Validate and sanitize all user input.", "line": 4, "reward": 1.0}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$filename = $_GET['file'];", "fix": "Validate and sanitize all user input.", "line": 5, "reward": 1.0}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $content;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 7, "reward": 0.5}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71.php", "language": "PHP", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Avoid unserializing untrusted data.", "line": 11, "reward": 1.0}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71.php", "language": "PHP", "finding": {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "if(isset($_COOKIE['prefs'])){", "fix": "Validate cookie data before use.", "line": 10, "reward": 0.5}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71.php", "language": "PHP", "finding": {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Validate cookie data before use.", "line": 11, "reward": 0.5}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71_BadTest2.php", "language": "PHP", "finding": {"type": "File read", "severity": "Medium", "problem_line": "$content = file_get_contents($filename); // unsafe: path traversal", "fix": "Validate input paths to prevent local file disclosure.", "line": 6, "reward": 0.5}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71_BadTest2.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['file'])){", "fix": "Validate and sanitize all user input.", "line": 4, "reward": 1.0}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71_BadTest2.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$filename = $_GET['file'];", "fix": "Validate and sanitize all user input.", "line": 5, "reward": 1.0}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71_BadTest2.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $content;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 7, "reward": 0.5}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71_BadTest2.php", "language": "PHP", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Avoid unserializing untrusted data.", "line": 11, "reward": 1.0}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71_BadTest2.php", "language": "PHP", "finding": {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "if(isset($_COOKIE['prefs'])){", "fix": "Validate cookie data before use.", "line": 10, "reward": 0.5}}
{"file": "code_samples/4b6ceadcbdeb0c7f9500510bfe39dd7d12afbe1d098ca98a1d76a97314943c71_BadTest2.php", "language": "PHP", "finding": {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Validate cookie data before use.", "line": 11, "reward": 0.5}}
{"file": "code_samples/4c723df68af7b94967f61ca68d07b70a6f5ec4c65ac007d6855739b62a177a61.c", "language": "C", "finding": {"type": "Unsafe gets", "severity": "High", "problem_line": "// Vulnerability 1: Buffer overflow with gets()", "fix": "Use fgets with size limits.", "line": 24, "reward": 1.0}}
{"file": "code_samples/4c723df68af7b94967f61ca68d07b70a6f5ec4c65ac007d6855739b62a177a61.c", "language": "C", "finding": {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(input);  // unsafe", "fix": "Use fgets with size limits.", "line": 26, "reward": 1.0}}
{"file": "code_samples/4c723df68af7b94967f61ca68d07b70a6f5ec4c65ac007d6855739b62a177a61.c", "language": "C", "finding": {"type": "Unsafe sprintf", "severity": "High", "problem_line": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "fix": "Use snprintf with buffer limits.", "line": 34, "reward": 1.0}}
{"file": "code_samples/4c723df68af7b94967f61ca68d07b70a6f5ec4c65ac007d6855739b62a177a61.c", "language": "C", "finding": {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[0].username, input, sizeof(users[0].username)); // okay but overflow already possible", "fix": "Ensure null-termination.", "line": 28, "reward": 0.2}}
{"file": "code_samples/4c723df68af7b94967f61ca68d07b70a6f5ec4c65ac007d6855739b62a177a61_bad_test.c", "language": "C", "finding": {"type": "Unsafe gets", "severity": "High", "problem_line": "// Vulnerability 1: Buffer overflow with gets()", "fix": "Use fgets with size limits.", "line": 24, "reward": 1.0}}
{"file": "code_samples/4c723df68af7b94967f61ca68d07b70a6f5ec4c65ac007d6855739b62a177a61_bad_test.c", "language": "C", "finding": {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(input);  // unsafe", "fix": "Use fgets with size limits.", "line": 26, "reward": 1.0}}
{"file": "code_samples/4c723df68af7b94967f61ca68d07b70a6f5ec4c65ac007d6855739b62a177a61_bad_test.c", "language": "C", "finding": {"type": "Unsafe sprintf", "severity": "High", "problem_line": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "fix": "Use snprintf with buffer limits.", "line": 34, "reward": 1.0}}
{"file": "code_samples/4c723df68af7b94967f61ca68d07b70a6f5ec4c65ac007d6855739b62a177a61_bad_test.c", "language": "C", "finding": {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[0].username, input, sizeof(users[0].username)); // okay but overflow already possible", "fix": "Ensure null-termination.", "line": 28, "reward": 0.2}}
{"file": "code_samples/5bf1d3cea10aaaa8681691e430b1f41be5b3e9fc512f6a3e52688801697e56ef.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/5bf1d3cea10aaaa8681691e430b1f41be5b3e9fc512f6a3e52688801697e56ef_SafeTest1.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/65fc7077a807b28f0c32a978a60dfffdbdc19fc36c64f82ce5bc4dd91828ff57.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 8, "reward": 1.0}}
{"file": "code_samples/65fc7077a807b28f0c32a978a60dfffdbdc19fc36c64f82ce5bc4dd91828ff57.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$stmt->bind_param(\"ss\", $_POST['username'], $_POST['password']); // safe", "fix": "Validate and sanitize all user input.", "line": 10, "reward": 1.0}}
{"file": "code_samples/65fc7077a807b28f0c32a978a60dfffdbdc19fc36c64f82ce5bc4dd91828ff57.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login successful!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14, "reward": 0.5}}
{"file": "code_samples/65fc7077a807b28f0c32a978a60dfffdbdc19fc36c64f82ce5bc4dd91828ff57.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login failed!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 16, "reward": 0.5}}
{"file": "code_samples/65fc7077a807b28f0c32a978a60dfffdbdc19fc36c64f82ce5bc4dd91828ff57_GoodTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 8, "reward": 1.0}}
{"file": "code_samples/65fc7077a807b28f0c32a978a60dfffdbdc19fc36c64f82ce5bc4dd91828ff57_GoodTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$stmt->bind_param(\"ss\", $_POST['username'], $_POST['password']); // safe", "fix": "Validate and sanitize all user input.", "line": 10, "reward": 1.0}}
{"file": "code_samples/65fc7077a807b28f0c32a978a60dfffdbdc19fc36c64f82ce5bc4dd91828ff57_GoodTest1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login successful!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14, "reward": 0.5}}
{"file": "code_samples/65fc7077a807b28f0c32a978a60dfffdbdc19fc36c64f82ce5bc4dd91828ff57_GoodTest1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login failed!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 16, "reward": 0.5}}
{"file": "code_samples/779883dca22a2128a8603593962b23ce9a1530fd3d71bd97d7e70d49eb3b6f7e.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 33, "reward": 1.0}}
{"file": "code_samples/779883dca22a2128a8603593962b23ce9a1530fd3d71bd97d7e70d49eb3b6f7e_Bad_Test1.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 33, "reward": 1.0}}
{"file": "code_samples/784581359f193a3d0b43f82886f8de795ed2efe45d1b082e1f9a577ca6317e7b.php", "language": "PHP", "finding": {"type": "Shell execution (shell_exec)", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Avoid shell_exec; sanitize inputs.", "line": 13, "reward": 1.0}}
{"file": "code_samples/784581359f193a3d0b43f82886f8de795ed2efe45d1b082e1f9a577ca6317e7b.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['cmd'])){", "fix": "Validate and sanitize all user input.", "line": 12, "reward": 1.0}}
{"file": "code_samples/784581359f193a3d0b43f82886f8de795ed2efe45d1b082e1f9a577ca6317e7b.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Validate and sanitize all user input.", "line": 13, "reward": 1.0}}
{"file": "code_samples/784581359f193a3d0b43f82886f8de795ed2efe45d1b082e1f9a577ca6317e7b.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $output;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14, "reward": 0.5}}
{"file": "code_samples/784581359f193a3d0b43f82886f8de795ed2efe45d1b082e1f9a577ca6317e7b.php", "language": "PHP", "finding": {"type": "Hardcoded credentials", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Use environment variables.", "line": 22, "reward": 1.0}}
{"file": "code_samples/784581359f193a3d0b43f82886f8de795ed2efe45d1b082e1f9a577ca6317e7b.php", "language": "PHP", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Do not store passwords in source code.", "line": 22, "reward": 1.0}}
{"file": "code_samples/784581359f193a3d0b43f82886f8de795ed2efe45d1b082e1f9a577ca6317e7b_MixedTest1.php", "language": "PHP", "finding": {"type": "Shell execution (shell_exec)", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Avoid shell_exec; sanitize inputs.", "line": 13, "reward": 1.0}}
{"file": "code_samples/784581359f193a3d0b43f82886f8de795ed2efe45d1b082e1f9a577ca6317e7b_MixedTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['cmd'])){", "fix": "Validate and sanitize all user input.", "line": 12, "reward": 1.0}}
{"file": "code_samples/784581359f193a3d0b43f82886f8de795ed2efe45d1b082e1f9a577ca6317e7b_MixedTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Validate and sanitize all user input.", "line": 13, "reward": 1.0}}
{"file": "code_samples/784581359f193a3d0b43f82886f8de795ed2efe45d1b082e1f9a577ca6317e7b_MixedTest1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $output;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14, "reward": 0.5}}
{"file": "code_samples/784581359f193a3d0b43f82886f8de795ed2efe45d1b082e1f9a577ca6317e7b_MixedTest1.php", "language": "PHP", "finding": {"type": "Hardcoded credentials", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Use environment variables.", "line": 22, "reward": 1.0}}
{"file": "code_samples/784581359f193a3d0b43f82886f8de795ed2efe45d1b082e1f9a577ca6317e7b_MixedTest1.php", "language": "PHP", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Do not store passwords in source code.", "line": 22, "reward": 1.0}}
{"file": "code_samples/9708d13d03c64ab4c9e1c1ecae092a7112a823532a9900e10789ad46960a41c8.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 5, "reward": 1.0}}
{"file": "code_samples/9708d13d03c64ab4c9e1c1ecae092a7112a823532a9900e10789ad46960a41c8.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 14, "reward": 1.0}}
{"file": "code_samples/9708d13d03c64ab4c9e1c1ecae092a7112a823532a9900e10789ad46960a41c8_test.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 5, "reward": 1.0}}
{"file": "code_samples/9708d13d03c64ab4c9e1c1ecae092a7112a823532a9900e10789ad46960a41c8_test.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 14, "reward": 1.0}}
{"file": "code_samples/a3bea715d8ccd0a3948794ba46031e563981af726c568e12c019d38ac84ae1aa.java", "language": "Java", "finding": {"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(code);", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 17, "reward": 1.0}}
{"file": "code_samples/a3bea715d8ccd0a3948794ba46031e563981af726c568e12c019d38ac84ae1aa_BadTest2.java", "language": "Java", "finding": {"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(code);", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 17, "reward": 1.0}}
{"file": "code_samples/c04960ec0f62fa6a2724bd80a477740d892d650aaa744c26028e04ccf6fc9de5.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 8, "reward": 1.0}}
{"file": "code_samples/c04960ec0f62fa6a2724bd80a477740d892d650aaa744c26028e04ccf6fc9de5_BadTest1.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 8, "reward": 1.0}}
{"file": "code_samples/cpp_multi1.cpp", "language": "C++", "finding": {"type": "Unsafe strcpy", "severity": "High", "problem_line": "strcpy(buf, \"Overflow\"); // buffer overflow", "fix": "Prefer std::string or strncpy.", "line": 9, "reward": 1.0}}
{"file": "code_samples/cpp_multi1.cpp", "language": "C++", "finding": {"type": "Heap allocation", "severity": "Low", "problem_line": "vector<int>* v = new vector<int>(5);", "fix": "Ensure delete is called; prevent leaks.", "line": 11, "reward": 0.2}}
{"file": "code_samples/cpp_multi1.cpp", "language": "C++", "finding": {"type": "Delete operator", "severity": "Low", "problem_line": "delete v;", "fix": "Avoid double delete; check null.", "line": 12, "reward": 0.2}}
{"file": "code_samples/cpp_multi1.cpp", "language": "C++", "finding": {"type": "Delete operator", "severity": "Low", "problem_line": "cout << v->at(0) << endl; // use-after-delete", "fix": "Avoid double delete; check null.", "line": 13, "reward": 0.2}}
{"file": "code_samples/cpp_multi1.cpp", "language": "C++", "finding": {"type": "Hardcoded string", "severity": "Medium", "problem_line": "string token = \"secret123\"; // hardcoded token", "fix": "Avoid hardcoding secrets; use environment variables.", "line": 15, "reward": 0.5}}
{"file": "code_samples/cpp_multi2.cpp", "language": "C++", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.php", "language": "PHP", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/fc52d2f53ee823b97ca87b4a6a9a1fda3d887779eaf8d6e812a1ef2dfc22dd9d.php", "language": "PHP", "finding": {"type": "File read", "severity": "Medium", "problem_line": "if(file_exists($path)) return json_decode(file_get_contents($path), true);", "fix": "Validate input paths to prevent local file disclosure.", "line": 14, "reward": 0.5}}
{"file": "code_samples/fc52d2f53ee823b97ca87b4a6a9a1fda3d887779eaf8d6e812a1ef2dfc22dd9d.php", "language": "PHP", "finding": {"type": "File upload risk", "severity": "High", "problem_line": "move_uploaded_file($file['tmp_name'], $uploadDir.$filename);", "fix": "Validate file type and path before moving.", "line": 9, "reward": 1.0}}
{"file": "code_samples/fc52d2f53ee823b97ca87b4a6a9a1fda3d887779eaf8d6e812a1ef2dfc22dd9d_GoodTest2.php", "language": "PHP", "finding": {"type": "File read", "severity": "Medium", "problem_line": "if(file_exists($path)) return json_decode(file_get_contents($path), true);", "fix": "Validate input paths to prevent local file disclosure.", "line": 14, "reward": 0.5}}
{"file": "code_samples/fc52d2f53ee823b97ca87b4a6a9a1fda3d887779eaf8d6e812a1ef2dfc22dd9d_GoodTest2.php", "language": "PHP", "finding": {"type": "File upload risk", "severity": "High", "problem_line": "move_uploaded_file($file['tmp_name'], $uploadDir.$filename);", "fix": "Validate file type and path before moving.", "line": 9, "reward": 1.0}}
{"file": "code_samples/g1.go", "language": "Go", "finding": {"type": "Use of default HTTP server without TLS", "severity": "High", "problem_line": "http.ListenAndServe(port, nil)", "fix": "Use TLS and proper server configuration.", "line": 61, "reward": 1.0}}
{"file": "code_samples/g1.go", "language": "Go", "finding": {"type": "ReadFile usage", "severity": "Medium", "problem_line": "data, err := ioutil.ReadFile(\"./public/\" + file)", "fix": "Validate paths; avoid info leaks.", "line": 36, "reward": 0.5}}
{"file": "code_samples/g1.go", "language": "Go", "finding": {"type": "Potential log format injection", "severity": "Medium", "problem_line": "log.Printf(\"Listening on %s\", port)", "fix": "Use structured logging and sanitize inputs.", "line": 60, "reward": 0.5}}
{"file": "code_samples/GoodTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 8, "reward": 1.0}}
{"file": "code_samples/GoodTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$stmt->bind_param(\"ss\", $_POST['username'], $_POST['password']); // safe", "fix": "Validate and sanitize all user input.", "line": 10, "reward": 1.0}}
{"file": "code_samples/GoodTest1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login successful!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14, "reward": 0.5}}
{"file": "code_samples/GoodTest1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login failed!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 16, "reward": 0.5}}
{"file": "code_samples/GoodTest1_2da6ec33.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/GoodTest2.php", "language": "PHP", "finding": {"type": "File read", "severity": "Medium", "problem_line": "if(file_exists($path)) return json_decode(file_get_contents($path), true);", "fix": "Validate input paths to prevent local file disclosure.", "line": 14, "reward": 0.5}}
{"file": "code_samples/GoodTest2.php", "language": "PHP", "finding": {"type": "File upload risk", "severity": "High", "problem_line": "move_uploaded_file($file['tmp_name'], $uploadDir.$filename);", "fix": "Validate file type and path before moving.", "line": 9, "reward": 1.0}}
{"file": "code_samples/GoodTest2_266df1ec.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/GoodTest3_0dcd114e.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/j3.java", "language": "Java", "finding": {"type": "Java deserialization", "severity": "High", "problem_line": "ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"data.ser\"));", "fix": "Avoid deserializing untrusted input.", "line": 4, "reward": 1.0}}
{"file": "code_samples/j3.java", "language": "Java", "finding": {"type": "File read", "severity": "Medium", "problem_line": "ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"data.ser\"));", "fix": "Validate paths to avoid information disclosure.", "line": 4, "reward": 0.5}}
{"file": "code_samples/j4.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE id=\" + userInput;", "fix": "Use prepared statements instead of string concatenation.", "line": 5, "reward": 1.0}}
{"file": "code_samples/j5.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/j6.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 34, "reward": 1.0}}
{"file": "code_samples/j7.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/j8.java", "language": "Java", "finding": {"type": "MD5 hashing", "severity": "Medium", "problem_line": "MessageDigest md = MessageDigest.getInstance(\"MD5\"); // weak algorithm", "fix": "Use SHA-256 or stronger hashing.", "line": 20, "reward": 0.5}}
{"file": "code_samples/JavaMulti1.java", "language": "Java", "finding": {"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(\"ls -la\"); // command execution", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 5, "reward": 1.0}}
{"file": "code_samples/JavaMulti1.java", "language": "Java", "finding": {"type": "Java deserialization", "severity": "High", "problem_line": "ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"data.ser\"));", "fix": "Avoid deserializing untrusted input.", "line": 10, "reward": 1.0}}
{"file": "code_samples/JavaMulti1.java", "language": "Java", "finding": {"type": "File read", "severity": "Medium", "problem_line": "ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"data.ser\"));", "fix": "Validate paths to avoid information disclosure.", "line": 10, "reward": 0.5}}
{"file": "code_samples/JavaMulti1.java", "language": "Java", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "String password = \"secret\"; // hardcoded", "fix": "Do not store passwords in source code.", "line": 7, "reward": 1.0}}
{"file": "code_samples/JavaMulti1.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE id=\" + userInput; // SQL injection", "fix": "Use prepared statements instead of string concatenation.", "line": 14, "reward": 1.0}}
{"file": "code_samples/JavaMulti2.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/java_test1.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/Main.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/main1.py", "language": "Python", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/MixedTest1.php", "language": "PHP", "finding": {"type": "Shell execution (shell_exec)", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Avoid shell_exec; sanitize inputs.", "line": 13, "reward": 1.0}}
{"file": "code_samples/MixedTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['cmd'])){", "fix": "Validate and sanitize all user input.", "line": 12, "reward": 1.0}}
{"file": "code_samples/MixedTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Validate and sanitize all user input.", "line": 13, "reward": 1.0}}
{"file": "code_samples/MixedTest1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $output;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14, "reward": 0.5}}
{"file": "code_samples/MixedTest1.php", "language": "PHP", "finding": {"type": "Hardcoded credentials", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Use environment variables.", "line": 22, "reward": 1.0}}
{"file": "code_samples/MixedTest1.php", "language": "PHP", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Do not store passwords in source code.", "line": 22, "reward": 1.0}}
{"file": "code_samples/NetworkClient.java", "language": "Java", "finding": {"type": "URL connection", "severity": "Medium", "problem_line": "HttpURLConnection conn = (HttpURLConnection) url.openConnection();", "fix": "Validate URLs; avoid SSRF attacks.", "line": 11, "reward": 0.5}}
{"file": "code_samples/NetworkClient.java", "language": "Java", "finding": {"type": "URL connection", "severity": "Medium", "problem_line": "HttpURLConnection conn = (HttpURLConnection) url.openConnection();", "fix": "Validate URLs; avoid SSRF attacks.", "line": 23, "reward": 0.5}}
{"file": "code_samples/p1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 34, "reward": 1.0}}
{"file": "code_samples/p1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$u = $_POST['username'];", "fix": "Validate and sanitize all user input.", "line": 35, "reward": 1.0}}
{"file": "code_samples/p1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$p = $_POST['password'];", "fix": "Validate and sanitize all user input.", "line": 36, "reward": 1.0}}
{"file": "code_samples/p1.php", "language": "PHP", "finding": {"type": "Weak hashing (MD5)", "severity": "Medium", "problem_line": "$data[] = md5(rand());", "fix": "Use SHA-256 or bcrypt/Argon2.", "line": 64, "reward": 0.5}}
{"file": "code_samples/p1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login successful!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 41, "reward": 0.5}}
{"file": "code_samples/p1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login failed!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 43, "reward": 0.5}}
{"file": "code_samples/p1.php", "language": "PHP", "finding": {"type": "Use of MD5", "severity": "Medium", "problem_line": "$data[] = md5(rand());", "fix": "Use SHA-256 or stronger hashing.", "line": 64, "reward": 0.5}}
{"file": "code_samples/p2.php", "language": "PHP", "finding": {"type": "File read", "severity": "Medium", "problem_line": "$content = file_get_contents($path);", "fix": "Validate input paths to prevent local file disclosure.", "line": 15, "reward": 0.5}}
{"file": "code_samples/p2.php", "language": "PHP", "finding": {"type": "File write", "severity": "Medium", "problem_line": "file_put_contents($filePath, $content, FILE_APPEND);", "fix": "Validate paths and sanitize input.", "line": 25, "reward": 0.5}}
{"file": "code_samples/p2.php", "language": "PHP", "finding": {"type": "File upload risk", "severity": "High", "problem_line": "move_uploaded_file($_FILES['file']['tmp_name'], $target);", "fix": "Validate file type and path before moving.", "line": 9, "reward": 1.0}}
{"file": "code_samples/p2.py", "language": "Python", "finding": {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(code)  # arbitrary code execution", "fix": "Avoid exec(); restrict execution or remove.", "line": 2, "reward": 1.0}}
{"file": "code_samples/p3.php", "language": "PHP", "finding": {"type": "Weak hashing (MD5)", "severity": "Medium", "problem_line": "$arr[$i] = md5(rand());", "fix": "Use SHA-256 or bcrypt/Argon2.", "line": 25, "reward": 0.5}}
{"file": "code_samples/p3.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo substr($d,0,10).\"\\n\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 35, "reward": 0.5}}
{"file": "code_samples/p3.php", "language": "PHP", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Avoid unserializing untrusted data.", "line": 10, "reward": 1.0}}
{"file": "code_samples/p3.php", "language": "PHP", "finding": {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "if(isset($_COOKIE['prefs'])){", "fix": "Validate cookie data before use.", "line": 9, "reward": 0.5}}
{"file": "code_samples/p3.php", "language": "PHP", "finding": {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Validate cookie data before use.", "line": 10, "reward": 0.5}}
{"file": "code_samples/p3.php", "language": "PHP", "finding": {"type": "Session usage", "severity": "Medium", "problem_line": "session_start();", "fix": "Ensure secure session handling.", "line": 4, "reward": 0.5}}
{"file": "code_samples/p3.php", "language": "PHP", "finding": {"type": "Potential session misuse", "severity": "Medium", "problem_line": "if(!isset($_SESSION['user'])){", "fix": "Validate session values before use.", "line": 5, "reward": 0.5}}
{"file": "code_samples/p3.php", "language": "PHP", "finding": {"type": "Potential session misuse", "severity": "Medium", "problem_line": "$_SESSION['user'] = \"guest\";", "fix": "Validate session values before use.", "line": 6, "reward": 0.5}}
{"file": "code_samples/p3.php", "language": "PHP", "finding": {"type": "Potential session misuse", "severity": "Medium", "problem_line": "if(!isset($_SESSION['role'])) $_SESSION['role']=\"guest\";", "fix": "Validate session values before use.", "line": 17, "reward": 0.5}}
{"file": "code_samples/p3.php", "language": "PHP", "finding": {"type": "Potential session misuse", "severity": "Medium", "problem_line": "return $_SESSION['role'] === $role;", "fix": "Validate session values before use.", "line": 18, "reward": 0.5}}
{"file": "code_samples/p3.php", "language": "PHP", "finding": {"type": "Use of MD5", "severity": "Medium", "problem_line": "$arr[$i] = md5(rand());", "fix": "Use SHA-256 or stronger hashing.", "line": 25, "reward": 0.5}}
{"file": "code_samples/p3.py", "language": "Python", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "password = \"123456\"", "fix": "Do not store passwords in source code.", "line": 1, "reward": 1.0}}
{"file": "code_samples/p4.php", "language": "PHP", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$unserialized = unserialize($serialized); // can be unsafe with untrusted input", "fix": "Avoid unserializing untrusted data.", "line": 26, "reward": 1.0}}
{"file": "code_samples/p4.py", "language": "Python", "finding": {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.loads(b\"cos\\nsystem\\n(S'ls'\\ntR.\")  # unsafe deserialization", "fix": "Do not unpickle untrusted data.", "line": 2, "reward": 1.0}}
{"file": "code_samples/p4.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.loads(b\"cos\\nsystem\\n(S'ls'\\ntR.\")  # unsafe deserialization", "fix": "Avoid deserializing untrusted input.", "line": 2, "reward": 1.0}}
{"file": "code_samples/p5.php", "language": "PHP", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/p5.py", "language": "Python", "finding": {"type": "TLS verification disabled", "severity": "High", "problem_line": "requests.get(\"https://example.com\", verify=False)  # disables SSL verification", "fix": "Enable certificate verification.", "line": 2, "reward": 1.0}}
{"file": "code_samples/p5.py", "language": "Python", "finding": {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null, "reward": 1.0}}
{"file": "code_samples/p6.php", "language": "PHP", "finding": {"type": "Dynamic include", "severity": "High", "problem_line": "include(__DIR__ . '/includes/' . $file);", "fix": "Avoid dynamic includes; validate file names.", "line": 31, "reward": 1.0}}
{"file": "code_samples/p6.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$action = $_GET['action'] ?? '';", "fix": "Validate and sanitize all user input.", "line": 21, "reward": 1.0}}
{"file": "code_samples/p6.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$user = $_GET['user'] ?? 'alice';", "fix": "Validate and sanitize all user input.", "line": 23, "reward": 1.0}}
{"file": "code_samples/p6.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$file = $_GET['file'] ?? 'default.php';", "fix": "Validate and sanitize all user input.", "line": 30, "reward": 1.0}}
{"file": "code_samples/p6.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"<h1>\" . $profile['name'] . \"</h1>\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 26, "reward": 0.5}}
{"file": "code_samples/p6.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"<div>\" . $profile['bio'] . \"</div>\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 27, "reward": 0.5}}
{"file": "code_samples/p6.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Welcome, visitor\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 35, "reward": 0.5}}
{"file": "code_samples/p6.php", "language": "PHP", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "$cfg = [", "fix": "Use prepared statements or ORM methods.", "line": 6, "reward": 1.0}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "return eval(data.split(\"EVAL:\")[1])  # Unsafe eval", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 54, "reward": 1.0}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "subprocess(..., shell=True)", "severity": "High", "problem_line": "subprocess.run(command, shell=True)  # Command injection risk", "fix": "Use list args and avoid shell=True.", "line": 60, "reward": 1.0}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "return pickle.load(f)", "fix": "Do not unpickle untrusted data.", "line": 34, "reward": 1.0}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "Unsafe yaml.load()", "severity": "High", "problem_line": "return yaml.load(f, Loader=yaml.Loader)  # Unsafe YAML deserialization", "fix": "Use yaml.safe_load() or SafeLoader.", "line": 41, "reward": 1.0}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "Direct system call", "severity": "High", "problem_line": "os.system(\"echo 'Special event triggered!'\")  # Command injection", "fix": "Validate inputs and use subprocess with args.", "line": 91, "reward": 1.0}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "File write without validation", "severity": "Medium", "problem_line": "with open(file_path, \"w\") as f:", "fix": "Validate file paths/permissions.", "line": 44, "reward": 0.5}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "File append without validation", "severity": "Medium", "problem_line": "with open(\"audit.log\", \"a\") as f:", "fix": "Validate file paths/permissions.", "line": 97, "reward": 0.5}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "Hardcoded secret/token", "severity": "High", "problem_line": "secret = \"TopSecretData\"", "fix": "Move secrets to environment variables or a secrets manager.", "line": 136, "reward": 1.0}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "Use of MD5", "severity": "Medium", "problem_line": "return hashlib.md5(password.encode()).hexdigest()  # Weak hashing", "fix": "Use SHA-256 or stronger hashing.", "line": 66, "reward": 0.5}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "TLS verification disabled", "severity": "High", "problem_line": "response = requests.post(url, data=payload, verify=False)", "fix": "Do not disable TLS verification in production.", "line": 79, "reward": 1.0}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "return pickle.load(f)", "fix": "Avoid deserializing untrusted input.", "line": 34, "reward": 1.0}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "return yaml.load(f, Loader=yaml.Loader)  # Unsafe YAML deserialization", "fix": "Avoid deserializing untrusted input.", "line": 41, "reward": 1.0}}
{"file": "code_samples/p6.py", "language": "Python", "finding": {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null, "reward": 1.0}}
{"file": "code_samples/p7.py", "language": "Python", "finding": {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "return pickle.loads(serialized)", "fix": "Do not unpickle untrusted data.", "line": 35, "reward": 1.0}}
{"file": "code_samples/p7.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "return pickle.loads(serialized)", "fix": "Avoid deserializing untrusted input.", "line": 35, "reward": 1.0}}
{"file": "code_samples/python_test1.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(input)  # unsafe", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 3, "reward": 1.0}}
{"file": "code_samples/py_multi1.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(user_code)  # unsafe eval", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 5, "reward": 1.0}}
{"file": "code_samples/py_multi1.py", "language": "Python", "finding": {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(code)  # unsafe exec", "fix": "Avoid exec(); restrict execution or remove.", "line": 8, "reward": 1.0}}
{"file": "code_samples/py_multi1.py", "language": "Python", "finding": {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.loads(b\"cos\\nsystem\\n(S'ls'\\ntR.\")  # unsafe deserialization", "fix": "Do not unpickle untrusted data.", "line": 13, "reward": 1.0}}
{"file": "code_samples/py_multi1.py", "language": "Python", "finding": {"type": "TLS verification disabled", "severity": "High", "problem_line": "requests.get(\"https://example.com\", verify=False)  # disables SSL verification", "fix": "Enable certificate verification.", "line": 16, "reward": 1.0}}
{"file": "code_samples/py_multi1.py", "language": "Python", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "password = \"123456\"  # hardcoded password", "fix": "Do not store passwords in source code.", "line": 10, "reward": 1.0}}
{"file": "code_samples/py_multi1.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.loads(b\"cos\\nsystem\\n(S'ls'\\ntR.\")  # unsafe deserialization", "fix": "Avoid deserializing untrusted input.", "line": 13, "reward": 1.0}}
{"file": "code_samples/py_multi1.py", "language": "Python", "finding": {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null, "reward": 1.0}}
{"file": "code_samples/py_multi2.py", "language": "Python", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/r1.rb", "language": "Ruby", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(code)", "fix": "Avoid eval; use safer parsing.", "line": 12, "reward": 1.0}}
{"file": "code_samples/r1.rb", "language": "Ruby", "finding": {"type": "system() execution", "severity": "High", "problem_line": "system(cmd)", "fix": "Sanitize inputs before executing system calls.", "line": 7, "reward": 1.0}}
{"file": "code_samples/r1.rb", "language": "Ruby", "finding": {"type": "File read", "severity": "Medium", "problem_line": "return File.read(path).strip", "fix": "Validate paths; avoid sensitive file exposure.", "line": 19, "reward": 0.5}}
{"file": "code_samples/SafeTest1.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/SafeTest1_5bf1d3ce.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/safe_test.c", "language": "C", "finding": {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[*count].username, username, sizeof(users[*count].username) - 1);", "fix": "Ensure null-termination.", "line": 22, "reward": 0.2}}
{"file": "code_samples/safe_test_41be20a3.c", "language": "C", "finding": {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[*count].username, username, sizeof(users[*count].username) - 1);", "fix": "Ensure null-termination.", "line": 22, "reward": 0.2}}
{"file": "code_samples/SecureUtils.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/SQLTest1.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + userInput + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 14, "reward": 1.0}}
{"file": "code_samples/SQLTest2.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String sql = \"SELECT * FROM accounts WHERE email='\" + email + \"' AND role='\" + role + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 17, "reward": 1.0}}
{"file": "code_samples/sql_injection1.py", "language": "Python", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "password = input(\"Enter password: \")", "fix": "Do not store passwords in source code.", "line": 7, "reward": 1.0}}
{"file": "code_samples/sql_injection2.py", "language": "Python", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/test.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 5, "reward": 1.0}}
{"file": "code_samples/test.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 14, "reward": 1.0}}
{"file": "code_samples/tests_c_tests_bad_test.c", "language": "C", "finding": {"type": "Unsafe gets", "severity": "High", "problem_line": "// Vulnerability 1: Buffer overflow with gets()", "fix": "Use fgets with size limits.", "line": 24, "reward": 1.0}}
{"file": "code_samples/tests_c_tests_bad_test.c", "language": "C", "finding": {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(input);  // unsafe", "fix": "Use fgets with size limits.", "line": 26, "reward": 1.0}}
{"file": "code_samples/tests_c_tests_bad_test.c", "language": "C", "finding": {"type": "Unsafe sprintf", "severity": "High", "problem_line": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "fix": "Use snprintf with buffer limits.", "line": 34, "reward": 1.0}}
{"file": "code_samples/tests_c_tests_bad_test.c", "language": "C", "finding": {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[0].username, input, sizeof(users[0].username)); // okay but overflow already possible", "fix": "Ensure null-termination.", "line": 28, "reward": 0.2}}
{"file": "code_samples/tests_c_tests_bad_test_1.c", "language": "C", "finding": {"type": "Unsafe gets", "severity": "High", "problem_line": "// Vulnerability 1: Buffer overflow with gets()", "fix": "Use fgets with size limits.", "line": 24, "reward": 1.0}}
{"file": "code_samples/tests_c_tests_bad_test_1.c", "language": "C", "finding": {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(input);  // unsafe", "fix": "Use fgets with size limits.", "line": 26, "reward": 1.0}}
{"file": "code_samples/tests_c_tests_bad_test_1.c", "language": "C", "finding": {"type": "Unsafe sprintf", "severity": "High", "problem_line": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "fix": "Use snprintf with buffer limits.", "line": 34, "reward": 1.0}}
{"file": "code_samples/tests_c_tests_bad_test_1.c", "language": "C", "finding": {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[0].username, input, sizeof(users[0].username)); // okay but overflow already possible", "fix": "Ensure null-termination.", "line": 28, "reward": 0.2}}
{"file": "code_samples/tests_c_tests_good1.c", "language": "C", "finding": {"type": "Environment variable access", "severity": "Medium", "problem_line": "const char* api_key = std::getenv(\"API_KEY\");", "fix": "Validate input; avoid exposing secrets.", "line": 85, "reward": 0.5}}
{"file": "code_samples/tests_c_tests_safe_test.c", "language": "C", "finding": {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[*count].username, username, sizeof(users[*count].username) - 1);", "fix": "Ensure null-termination.", "line": 22, "reward": 0.2}}
{"file": "code_samples/tests_c_tests_test_bad.c", "language": "C", "finding": {"type": "Hardcoded secret/token", "severity": "High", "problem_line": "std::string apiKey = \"API_KEY_12345\";", "fix": "Move secrets to environment variables or a secrets manager.", "line": 17, "reward": 1.0}}
{"file": "code_samples/tests_java_tests_Bad_Test1.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 33, "reward": 1.0}}
{"file": "code_samples/tests_java_tests_java_test_project_BadTest1.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 8, "reward": 1.0}}
{"file": "code_samples/tests_java_tests_java_test_project_BadTest2.java", "language": "Java", "finding": {"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(code);", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 17, "reward": 1.0}}
{"file": "code_samples/tests_java_tests_java_test_project_GoodTest1.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/tests_java_tests_java_test_project_GoodTest2.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/tests_java_tests_java_test_project_GoodTest3.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/tests_java_tests_SafeTest1.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/tests_php_tests_BadTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 4, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_BadTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$u = $_POST['username'];", "fix": "Validate and sanitize all user input.", "line": 5, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_BadTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$p = $_POST['password'];", "fix": "Validate and sanitize all user input.", "line": 6, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_BadTest1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Query: $query\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 8, "reward": 0.5}}
{"file": "code_samples/tests_php_tests_BadTest2.php", "language": "PHP", "finding": {"type": "File read", "severity": "Medium", "problem_line": "$content = file_get_contents($filename); // unsafe: path traversal", "fix": "Validate input paths to prevent local file disclosure.", "line": 6, "reward": 0.5}}
{"file": "code_samples/tests_php_tests_BadTest2.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['file'])){", "fix": "Validate and sanitize all user input.", "line": 4, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_BadTest2.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$filename = $_GET['file'];", "fix": "Validate and sanitize all user input.", "line": 5, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_BadTest2.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $content;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 7, "reward": 0.5}}
{"file": "code_samples/tests_php_tests_BadTest2.php", "language": "PHP", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Avoid unserializing untrusted data.", "line": 11, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_BadTest2.php", "language": "PHP", "finding": {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "if(isset($_COOKIE['prefs'])){", "fix": "Validate cookie data before use.", "line": 10, "reward": 0.5}}
{"file": "code_samples/tests_php_tests_BadTest2.php", "language": "PHP", "finding": {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Validate cookie data before use.", "line": 11, "reward": 0.5}}
{"file": "code_samples/tests_php_tests_GoodTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 8, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_GoodTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$stmt->bind_param(\"ss\", $_POST['username'], $_POST['password']); // safe", "fix": "Validate and sanitize all user input.", "line": 10, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_GoodTest1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login successful!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14, "reward": 0.5}}
{"file": "code_samples/tests_php_tests_GoodTest1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login failed!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 16, "reward": 0.5}}
{"file": "code_samples/tests_php_tests_GoodTest2.php", "language": "PHP", "finding": {"type": "File read", "severity": "Medium", "problem_line": "if(file_exists($path)) return json_decode(file_get_contents($path), true);", "fix": "Validate input paths to prevent local file disclosure.", "line": 14, "reward": 0.5}}
{"file": "code_samples/tests_php_tests_GoodTest2.php", "language": "PHP", "finding": {"type": "File upload risk", "severity": "High", "problem_line": "move_uploaded_file($file['tmp_name'], $uploadDir.$filename);", "fix": "Validate file type and path before moving.", "line": 9, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_MixedTest1.php", "language": "PHP", "finding": {"type": "Shell execution (shell_exec)", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Avoid shell_exec; sanitize inputs.", "line": 13, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_MixedTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['cmd'])){", "fix": "Validate and sanitize all user input.", "line": 12, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_MixedTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Validate and sanitize all user input.", "line": 13, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_MixedTest1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $output;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14, "reward": 0.5}}
{"file": "code_samples/tests_php_tests_MixedTest1.php", "language": "PHP", "finding": {"type": "Hardcoded credentials", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Use environment variables.", "line": 22, "reward": 1.0}}
{"file": "code_samples/tests_php_tests_MixedTest1.php", "language": "PHP", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Do not store passwords in source code.", "line": 22, "reward": 1.0}}
{"file": "code_samples/tests_py_tests_Bad_Test1.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 15, "reward": 1.0}}
{"file": "code_samples/tests_py_tests_Bad_Test1.py", "language": "Python", "finding": {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid exec(); restrict execution or remove.", "line": 20, "reward": 1.0}}
{"file": "code_samples/tests_py_tests_Bad_Test1.py", "language": "Python", "finding": {"type": "subprocess(..., shell=True)", "severity": "High", "problem_line": "subprocess.run(cmd, shell=True)  # shell=True is unsafe", "fix": "Use list args and avoid shell=True.", "line": 39, "reward": 1.0}}
{"file": "code_samples/tests_py_tests_Bad_Test1.py", "language": "Python", "finding": {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Do not unpickle untrusted data.", "line": 33, "reward": 1.0}}
{"file": "code_samples/tests_py_tests_Bad_Test1.py", "language": "Python", "finding": {"type": "TLS verification disabled", "severity": "High", "problem_line": "r = requests.get(\"https://example.com\", verify=False)  # TLS verification disabled", "fix": "Enable certificate verification.", "line": 43, "reward": 1.0}}
{"file": "code_samples/tests_py_tests_Bad_Test1.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Avoid deserializing untrusted input.", "line": 33, "reward": 1.0}}
{"file": "code_samples/tests_py_tests_Bad_Test1.py", "language": "Python", "finding": {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null, "reward": 1.0}}
{"file": "code_samples/tests_py_tests_test.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 5, "reward": 1.0}}
{"file": "code_samples/tests_py_tests_test.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 14, "reward": 1.0}}
{"file": "code_samples/TransactionProcessor.java", "language": "Java", "finding": {"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(command);", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 9, "reward": 1.0}}
{"file": "code_samples/User.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/UserManager.java", "language": "Java", "finding": {"type": "Java deserialization", "severity": "High", "problem_line": "ObjectInputStream in = new ObjectInputStream(fileIn);", "fix": "Avoid deserializing untrusted input.", "line": 35, "reward": 1.0}}
{"file": "code_samples/UserManager.java", "language": "Java", "finding": {"type": "File write", "severity": "Medium", "problem_line": "FileOutputStream fileOut = new FileOutputStream(fileName);", "fix": "Validate paths and avoid overwriting sensitive files.", "line": 21, "reward": 0.5}}
{"file": "code_samples/UserManager.java", "language": "Java", "finding": {"type": "File read", "severity": "Medium", "problem_line": "FileInputStream fileIn = new FileInputStream(fileName);", "fix": "Validate paths to avoid information disclosure.", "line": 34, "reward": 0.5}}
{"file": "code_samples/UserManager.java", "language": "Java", "finding": {"type": "Serialization output", "severity": "High", "problem_line": "ObjectOutputStream out = new ObjectOutputStream(fileOut);", "fix": "Avoid writing sensitive data insecurely.", "line": 22, "reward": 1.0}}
{"file": "code_samples/utils.py", "language": "Python", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/VulnerableUtils.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/C++/cpp_multi1.cpp", "language": "C++", "finding": {"type": "Unsafe strcpy", "severity": "High", "problem_line": "strcpy(buf, \"Overflow\"); // buffer overflow", "fix": "Prefer std::string or strncpy.", "line": 9, "reward": 1.0}}
{"file": "code_samples/C++/cpp_multi1.cpp", "language": "C++", "finding": {"type": "Heap allocation", "severity": "Low", "problem_line": "vector<int>* v = new vector<int>(5);", "fix": "Ensure delete is called; prevent leaks.", "line": 11, "reward": 0.2}}
{"file": "code_samples/C++/cpp_multi1.cpp", "language": "C++", "finding": {"type": "Delete operator", "severity": "Low", "problem_line": "delete v;", "fix": "Avoid double delete; check null.", "line": 12, "reward": 0.2}}
{"file": "code_samples/C++/cpp_multi1.cpp", "language": "C++", "finding": {"type": "Delete operator", "severity": "Low", "problem_line": "cout << v->at(0) << endl; // use-after-delete", "fix": "Avoid double delete; check null.", "line": 13, "reward": 0.2}}
{"file": "code_samples/C++/cpp_multi1.cpp", "language": "C++", "finding": {"type": "Hardcoded string", "severity": "Medium", "problem_line": "string token = \"secret123\"; // hardcoded token", "fix": "Avoid hardcoding secrets; use environment variables.", "line": 15, "reward": 0.5}}
{"file": "code_samples/C++/cpp_multi2.cpp", "language": "C++", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/C_samples/bad_test.c", "language": "C", "finding": {"type": "Unsafe gets", "severity": "High", "problem_line": "// Vulnerability 1: Buffer overflow with gets()", "fix": "Use fgets with size limits.", "line": 24, "reward": 1.0}}
{"file": "code_samples/C_samples/bad_test.c", "language": "C", "finding": {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(input);  // unsafe", "fix": "Use fgets with size limits.", "line": 26, "reward": 1.0}}
{"file": "code_samples/C_samples/bad_test.c", "language": "C", "finding": {"type": "Unsafe sprintf", "severity": "High", "problem_line": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "fix": "Use snprintf with buffer limits.", "line": 34, "reward": 1.0}}
{"file": "code_samples/C_samples/bad_test.c", "language": "C", "finding": {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[0].username, input, sizeof(users[0].username)); // okay but overflow already possible", "fix": "Ensure null-termination.", "line": 28, "reward": 0.2}}
{"file": "code_samples/C_samples/c2.c", "language": "C", "finding": {"type": "Dynamic memory allocation", "severity": "Medium", "problem_line": "int *ptr = malloc(sizeof(int)*5);", "fix": "Check for NULL; prevent buffer overflow.", "line": 3, "reward": 0.5}}
{"file": "code_samples/C_samples/c2.c", "language": "C", "finding": {"type": "Free memory", "severity": "Low", "problem_line": "free(ptr);", "fix": "Avoid double free.", "line": 4, "reward": 0.2}}
{"file": "code_samples/C_samples/c3.c", "language": "C", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/C_samples/c4.c", "language": "C", "finding": {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(buf); // unsafe, can overflow", "fix": "Use fgets with size limits.", "line": 4, "reward": 1.0}}
{"file": "code_samples/C_samples/c5.c", "language": "C", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/C_samples/c6.c", "language": "C", "finding": {"type": "Unsafe strcpy", "severity": "High", "problem_line": "strcpy(buffer, a);   // unsafe if a is longer than 63", "fix": "Use strncpy or bounds-checked functions.", "line": 21, "reward": 1.0}}
{"file": "code_samples/C_samples/c6.c", "language": "C", "finding": {"type": "Unsafe strcat", "severity": "High", "problem_line": "strcat(buffer, b);   // unsafe concatenation", "fix": "Use strncat or safer alternatives.", "line": 22, "reward": 1.0}}
{"file": "code_samples/C_samples/c6.c", "language": "C", "finding": {"type": "Environment variable access", "severity": "Medium", "problem_line": "char *envp = getenv(\"CONFIG\");", "fix": "Validate input; avoid exposing secrets.", "line": 50, "reward": 0.5}}
{"file": "code_samples/C_samples/c6.c", "language": "C", "finding": {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(configbuf, envp, sizeof(configbuf) - 1);", "fix": "Ensure null-termination.", "line": 54, "reward": 0.2}}
{"file": "code_samples/C_samples/c_multi1.c", "language": "C", "finding": {"type": "Unsafe strcpy", "severity": "High", "problem_line": "strcpy(buf, \"This string is way too long!\"); // Buffer overflow", "fix": "Use strncpy or bounds-checked functions.", "line": 7, "reward": 1.0}}
{"file": "code_samples/C_samples/c_multi1.c", "language": "C", "finding": {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(input); // unsafe input", "fix": "Use fgets with size limits.", "line": 17, "reward": 1.0}}
{"file": "code_samples/C_samples/c_multi1.c", "language": "C", "finding": {"type": "Dynamic memory allocation", "severity": "Medium", "problem_line": "char *ptr = malloc(sizeof(int)*5);", "fix": "Check for NULL; prevent buffer overflow.", "line": 9, "reward": 0.5}}
{"file": "code_samples/C_samples/c_multi1.c", "language": "C", "finding": {"type": "Free memory", "severity": "Low", "problem_line": "free(ptr);", "fix": "Avoid double free.", "line": 10, "reward": 0.2}}
{"file": "code_samples/C_samples/c_multi2.c", "language": "C", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/C_samples/c_sample1.c", "language": "C", "finding": {"type": "Unsafe strcpy", "severity": "High", "problem_line": "strcpy(buf, \"This string is too long!\"); // buffer overflow", "fix": "Use strncpy or bounds-checked functions.", "line": 5, "reward": 1.0}}
{"file": "code_samples/Go/g1.go", "language": "Go", "finding": {"type": "Use of default HTTP server without TLS", "severity": "High", "problem_line": "http.ListenAndServe(port, nil)", "fix": "Use TLS and proper server configuration.", "line": 61, "reward": 1.0}}
{"file": "code_samples/Go/g1.go", "language": "Go", "finding": {"type": "ReadFile usage", "severity": "Medium", "problem_line": "data, err := ioutil.ReadFile(\"./public/\" + file)", "fix": "Validate paths; avoid info leaks.", "line": 36, "reward": 0.5}}
{"file": "code_samples/Go/g1.go", "language": "Go", "finding": {"type": "Potential log format injection", "severity": "Medium", "problem_line": "log.Printf(\"Listening on %s\", port)", "fix": "Use structured logging and sanitize inputs.", "line": 60, "reward": 0.5}}
{"file": "code_samples/java_samples/BadTest1.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 8, "reward": 1.0}}
{"file": "code_samples/java_samples/BadTest2.java", "language": "Java", "finding": {"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(code);", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 17, "reward": 1.0}}
{"file": "code_samples/java_samples/Bad_Test1.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 33, "reward": 1.0}}
{"file": "code_samples/java_samples/GoodTest1.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/java_samples/GoodTest2.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/java_samples/GoodTest3.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/java_samples/j2.java", "language": "Java", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "String password = \"secret\"; // hardcoded", "fix": "Do not store passwords in source code.", "line": 3, "reward": 1.0}}
{"file": "code_samples/java_samples/j3.java", "language": "Java", "finding": {"type": "Java deserialization", "severity": "High", "problem_line": "ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"data.ser\"));", "fix": "Avoid deserializing untrusted input.", "line": 4, "reward": 1.0}}
{"file": "code_samples/java_samples/j3.java", "language": "Java", "finding": {"type": "File read", "severity": "Medium", "problem_line": "ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"data.ser\"));", "fix": "Validate paths to avoid information disclosure.", "line": 4, "reward": 0.5}}
{"file": "code_samples/java_samples/j4.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE id=\" + userInput;", "fix": "Use prepared statements instead of string concatenation.", "line": 5, "reward": 1.0}}
{"file": "code_samples/java_samples/j5.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/java_samples/j6.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 34, "reward": 1.0}}
{"file": "code_samples/java_samples/j7.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/java_samples/j8.java", "language": "Java", "finding": {"type": "MD5 hashing", "severity": "Medium", "problem_line": "MessageDigest md = MessageDigest.getInstance(\"MD5\"); // weak algorithm", "fix": "Use SHA-256 or stronger hashing.", "line": 20, "reward": 0.5}}
{"file": "code_samples/java_samples/JavaMulti1.java", "language": "Java", "finding": {"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(\"ls -la\"); // command execution", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 5, "reward": 1.0}}
{"file": "code_samples/java_samples/JavaMulti1.java", "language": "Java", "finding": {"type": "Java deserialization", "severity": "High", "problem_line": "ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"data.ser\"));", "fix": "Avoid deserializing untrusted input.", "line": 10, "reward": 1.0}}
{"file": "code_samples/java_samples/JavaMulti1.java", "language": "Java", "finding": {"type": "File read", "severity": "Medium", "problem_line": "ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"data.ser\"));", "fix": "Validate paths to avoid information disclosure.", "line": 10, "reward": 0.5}}
{"file": "code_samples/java_samples/JavaMulti1.java", "language": "Java", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "String password = \"secret\"; // hardcoded", "fix": "Do not store passwords in source code.", "line": 7, "reward": 1.0}}
{"file": "code_samples/java_samples/JavaMulti1.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE id=\" + userInput; // SQL injection", "fix": "Use prepared statements instead of string concatenation.", "line": 14, "reward": 1.0}}
{"file": "code_samples/java_samples/JavaMulti2.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/java_samples/java_test1.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/java_samples/SQLTest1.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + userInput + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 14, "reward": 1.0}}
{"file": "code_samples/java_samples/SQLTest2.java", "language": "Java", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "String sql = \"SELECT * FROM accounts WHERE email='\" + email + \"' AND role='\" + role + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 17, "reward": 1.0}}
{"file": "code_samples/java_samples/JavaVulnProject/src/Main.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/java_samples/JavaVulnProject/src/NetworkClient.java", "language": "Java", "finding": {"type": "URL connection", "severity": "Medium", "problem_line": "HttpURLConnection conn = (HttpURLConnection) url.openConnection();", "fix": "Validate URLs; avoid SSRF attacks.", "line": 11, "reward": 0.5}}
{"file": "code_samples/java_samples/JavaVulnProject/src/NetworkClient.java", "language": "Java", "finding": {"type": "URL connection", "severity": "Medium", "problem_line": "HttpURLConnection conn = (HttpURLConnection) url.openConnection();", "fix": "Validate URLs; avoid SSRF attacks.", "line": 23, "reward": 0.5}}
{"file": "code_samples/java_samples/JavaVulnProject/src/SecureUtils.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/java_samples/JavaVulnProject/src/TransactionProcessor.java", "language": "Java", "finding": {"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(command);", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 9, "reward": 1.0}}
{"file": "code_samples/java_samples/JavaVulnProject/src/User.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/java_samples/JavaVulnProject/src/UserManager.java", "language": "Java", "finding": {"type": "Java deserialization", "severity": "High", "problem_line": "ObjectInputStream in = new ObjectInputStream(fileIn);", "fix": "Avoid deserializing untrusted input.", "line": 35, "reward": 1.0}}
{"file": "code_samples/java_samples/JavaVulnProject/src/UserManager.java", "language": "Java", "finding": {"type": "File write", "severity": "Medium", "problem_line": "FileOutputStream fileOut = new FileOutputStream(fileName);", "fix": "Validate paths and avoid overwriting sensitive files.", "line": 21, "reward": 0.5}}
{"file": "code_samples/java_samples/JavaVulnProject/src/UserManager.java", "language": "Java", "finding": {"type": "File read", "severity": "Medium", "problem_line": "FileInputStream fileIn = new FileInputStream(fileName);", "fix": "Validate paths to avoid information disclosure.", "line": 34, "reward": 0.5}}
{"file": "code_samples/java_samples/JavaVulnProject/src/UserManager.java", "language": "Java", "finding": {"type": "Serialization output", "severity": "High", "problem_line": "ObjectOutputStream out = new ObjectOutputStream(fileOut);", "fix": "Avoid writing sensitive data insecurely.", "line": 22, "reward": 1.0}}
{"file": "code_samples/java_samples/JavaVulnProject/src/VulnerableUtils.java", "language": "Java", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/java_samples/java_tests/j2.java", "language": "Java", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "String password = \"secret\"; // hardcoded", "fix": "Do not store passwords in source code.", "line": 3, "reward": 1.0}}
{"file": "code_samples/PHP/BadTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 4, "reward": 1.0}}
{"file": "code_samples/PHP/BadTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$u = $_POST['username'];", "fix": "Validate and sanitize all user input.", "line": 5, "reward": 1.0}}
{"file": "code_samples/PHP/BadTest1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$p = $_POST['password'];", "fix": "Validate and sanitize all user input.", "line": 6, "reward": 1.0}}
{"file": "code_samples/PHP/BadTest1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Query: $query\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 8, "reward": 0.5}}
{"file": "code_samples/PHP/BadTest2.php", "language": "PHP", "finding": {"type": "File read", "severity": "Medium", "problem_line": "$content = file_get_contents($filename); // unsafe: path traversal", "fix": "Validate input paths to prevent local file disclosure.", "line": 6, "reward": 0.5}}
{"file": "code_samples/PHP/BadTest2.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['file'])){", "fix": "Validate and sanitize all user input.", "line": 4, "reward": 1.0}}
{"file": "code_samples/PHP/BadTest2.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$filename = $_GET['file'];", "fix": "Validate and sanitize all user input.", "line": 5, "reward": 1.0}}
{"file": "code_samples/PHP/BadTest2.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $content;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 7, "reward": 0.5}}
{"file": "code_samples/PHP/BadTest2.php", "language": "PHP", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Avoid unserializing untrusted data.", "line": 11, "reward": 1.0}}
{"file": "code_samples/PHP/BadTest2.php", "language": "PHP", "finding": {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "if(isset($_COOKIE['prefs'])){", "fix": "Validate cookie data before use.", "line": 10, "reward": 0.5}}
{"file": "code_samples/PHP/BadTest2.php", "language": "PHP", "finding": {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Validate cookie data before use.", "line": 11, "reward": 0.5}}
{"file": "code_samples/PHP/p1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 34, "reward": 1.0}}
{"file": "code_samples/PHP/p1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$u = $_POST['username'];", "fix": "Validate and sanitize all user input.", "line": 35, "reward": 1.0}}
{"file": "code_samples/PHP/p1.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$p = $_POST['password'];", "fix": "Validate and sanitize all user input.", "line": 36, "reward": 1.0}}
{"file": "code_samples/PHP/p1.php", "language": "PHP", "finding": {"type": "Weak hashing (MD5)", "severity": "Medium", "problem_line": "$data[] = md5(rand());", "fix": "Use SHA-256 or bcrypt/Argon2.", "line": 64, "reward": 0.5}}
{"file": "code_samples/PHP/p1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login successful!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 41, "reward": 0.5}}
{"file": "code_samples/PHP/p1.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login failed!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 43, "reward": 0.5}}
{"file": "code_samples/PHP/p1.php", "language": "PHP", "finding": {"type": "Use of MD5", "severity": "Medium", "problem_line": "$data[] = md5(rand());", "fix": "Use SHA-256 or stronger hashing.", "line": 64, "reward": 0.5}}
{"file": "code_samples/PHP/p2.php", "language": "PHP", "finding": {"type": "File read", "severity": "Medium", "problem_line": "$content = file_get_contents($path);", "fix": "Validate input paths to prevent local file disclosure.", "line": 15, "reward": 0.5}}
{"file": "code_samples/PHP/p2.php", "language": "PHP", "finding": {"type": "File write", "severity": "Medium", "problem_line": "file_put_contents($filePath, $content, FILE_APPEND);", "fix": "Validate paths and sanitize input.", "line": 25, "reward": 0.5}}
{"file": "code_samples/PHP/p2.php", "language": "PHP", "finding": {"type": "File upload risk", "severity": "High", "problem_line": "move_uploaded_file($_FILES['file']['tmp_name'], $target);", "fix": "Validate file type and path before moving.", "line": 9, "reward": 1.0}}
{"file": "code_samples/PHP/p3.php", "language": "PHP", "finding": {"type": "Weak hashing (MD5)", "severity": "Medium", "problem_line": "$arr[$i] = md5(rand());", "fix": "Use SHA-256 or bcrypt/Argon2.", "line": 25, "reward": 0.5}}
{"file": "code_samples/PHP/p3.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo substr($d,0,10).\"\\n\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 35, "reward": 0.5}}
{"file": "code_samples/PHP/p3.php", "language": "PHP", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Avoid unserializing untrusted data.", "line": 10, "reward": 1.0}}
{"file": "code_samples/PHP/p3.php", "language": "PHP", "finding": {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "if(isset($_COOKIE['prefs'])){", "fix": "Validate cookie data before use.", "line": 9, "reward": 0.5}}
{"file": "code_samples/PHP/p3.php", "language": "PHP", "finding": {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Validate cookie data before use.", "line": 10, "reward": 0.5}}
{"file": "code_samples/PHP/p3.php", "language": "PHP", "finding": {"type": "Session usage", "severity": "Medium", "problem_line": "session_start();", "fix": "Ensure secure session handling.", "line": 4, "reward": 0.5}}
{"file": "code_samples/PHP/p3.php", "language": "PHP", "finding": {"type": "Potential session misuse", "severity": "Medium", "problem_line": "if(!isset($_SESSION['user'])){", "fix": "Validate session values before use.", "line": 5, "reward": 0.5}}
{"file": "code_samples/PHP/p3.php", "language": "PHP", "finding": {"type": "Potential session misuse", "severity": "Medium", "problem_line": "$_SESSION['user'] = \"guest\";", "fix": "Validate session values before use.", "line": 6, "reward": 0.5}}
{"file": "code_samples/PHP/p3.php", "language": "PHP", "finding": {"type": "Potential session misuse", "severity": "Medium", "problem_line": "if(!isset($_SESSION['role'])) $_SESSION['role']=\"guest\";", "fix": "Validate session values before use.", "line": 17, "reward": 0.5}}
{"file": "code_samples/PHP/p3.php", "language": "PHP", "finding": {"type": "Potential session misuse", "severity": "Medium", "problem_line": "return $_SESSION['role'] === $role;", "fix": "Validate session values before use.", "line": 18, "reward": 0.5}}
{"file": "code_samples/PHP/p3.php", "language": "PHP", "finding": {"type": "Use of MD5", "severity": "Medium", "problem_line": "$arr[$i] = md5(rand());", "fix": "Use SHA-256 or stronger hashing.", "line": 25, "reward": 0.5}}
{"file": "code_samples/PHP/p4.php", "language": "PHP", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$unserialized = unserialize($serialized); // can be unsafe with untrusted input", "fix": "Avoid unserializing untrusted data.", "line": 26, "reward": 1.0}}
{"file": "code_samples/PHP/p5.php", "language": "PHP", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/PHP/p6.php", "language": "PHP", "finding": {"type": "Dynamic include", "severity": "High", "problem_line": "include(__DIR__ . '/includes/' . $file);", "fix": "Avoid dynamic includes; validate file names.", "line": 31, "reward": 1.0}}
{"file": "code_samples/PHP/p6.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$action = $_GET['action'] ?? '';", "fix": "Validate and sanitize all user input.", "line": 21, "reward": 1.0}}
{"file": "code_samples/PHP/p6.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$user = $_GET['user'] ?? 'alice';", "fix": "Validate and sanitize all user input.", "line": 23, "reward": 1.0}}
{"file": "code_samples/PHP/p6.php", "language": "PHP", "finding": {"type": "Unvalidated user input", "severity": "High", "problem_line": "$file = $_GET['file'] ?? 'default.php';", "fix": "Validate and sanitize all user input.", "line": 30, "reward": 1.0}}
{"file": "code_samples/PHP/p6.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"<h1>\" . $profile['name'] . \"</h1>\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 26, "reward": 0.5}}
{"file": "code_samples/PHP/p6.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"<div>\" . $profile['bio'] . \"</div>\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 27, "reward": 0.5}}
{"file": "code_samples/PHP/p6.php", "language": "PHP", "finding": {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Welcome, visitor\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 35, "reward": 0.5}}
{"file": "code_samples/PHP/p6.php", "language": "PHP", "finding": {"type": "Possible SQL Injection", "severity": "High", "problem_line": "$cfg = [", "fix": "Use prepared statements or ORM methods.", "line": 6, "reward": 1.0}}
{"file": "code_samples/python_samples/Bad_Test1.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 15, "reward": 1.0}}
{"file": "code_samples/python_samples/Bad_Test1.py", "language": "Python", "finding": {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid exec(); restrict execution or remove.", "line": 20, "reward": 1.0}}
{"file": "code_samples/python_samples/Bad_Test1.py", "language": "Python", "finding": {"type": "subprocess(..., shell=True)", "severity": "High", "problem_line": "subprocess.run(cmd, shell=True)  # shell=True is unsafe", "fix": "Use list args and avoid shell=True.", "line": 39, "reward": 1.0}}
{"file": "code_samples/python_samples/Bad_Test1.py", "language": "Python", "finding": {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Do not unpickle untrusted data.", "line": 33, "reward": 1.0}}
{"file": "code_samples/python_samples/Bad_Test1.py", "language": "Python", "finding": {"type": "TLS verification disabled", "severity": "High", "problem_line": "r = requests.get(\"https://example.com\", verify=False)  # TLS verification disabled", "fix": "Enable certificate verification.", "line": 43, "reward": 1.0}}
{"file": "code_samples/python_samples/Bad_Test1.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Avoid deserializing untrusted input.", "line": 33, "reward": 1.0}}
{"file": "code_samples/python_samples/Bad_Test1.py", "language": "Python", "finding": {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null, "reward": 1.0}}
{"file": "code_samples/python_samples/p2.py", "language": "Python", "finding": {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(code)  # arbitrary code execution", "fix": "Avoid exec(); restrict execution or remove.", "line": 2, "reward": 1.0}}
{"file": "code_samples/python_samples/p3.py", "language": "Python", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "password = \"123456\"", "fix": "Do not store passwords in source code.", "line": 1, "reward": 1.0}}
{"file": "code_samples/python_samples/p4.py", "language": "Python", "finding": {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.loads(b\"cos\\nsystem\\n(S'ls'\\ntR.\")  # unsafe deserialization", "fix": "Do not unpickle untrusted data.", "line": 2, "reward": 1.0}}
{"file": "code_samples/python_samples/p4.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.loads(b\"cos\\nsystem\\n(S'ls'\\ntR.\")  # unsafe deserialization", "fix": "Avoid deserializing untrusted input.", "line": 2, "reward": 1.0}}
{"file": "code_samples/python_samples/p5.py", "language": "Python", "finding": {"type": "TLS verification disabled", "severity": "High", "problem_line": "requests.get(\"https://example.com\", verify=False)  # disables SSL verification", "fix": "Enable certificate verification.", "line": 2, "reward": 1.0}}
{"file": "code_samples/python_samples/p5.py", "language": "Python", "finding": {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null, "reward": 1.0}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "return eval(data.split(\"EVAL:\")[1])  # Unsafe eval", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 54, "reward": 1.0}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "subprocess(..., shell=True)", "severity": "High", "problem_line": "subprocess.run(command, shell=True)  # Command injection risk", "fix": "Use list args and avoid shell=True.", "line": 60, "reward": 1.0}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "return pickle.load(f)", "fix": "Do not unpickle untrusted data.", "line": 34, "reward": 1.0}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "Unsafe yaml.load()", "severity": "High", "problem_line": "return yaml.load(f, Loader=yaml.Loader)  # Unsafe YAML deserialization", "fix": "Use yaml.safe_load() or SafeLoader.", "line": 41, "reward": 1.0}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "Direct system call", "severity": "High", "problem_line": "os.system(\"echo 'Special event triggered!'\")  # Command injection", "fix": "Validate inputs and use subprocess with args.", "line": 91, "reward": 1.0}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "File write without validation", "severity": "Medium", "problem_line": "with open(file_path, \"w\") as f:", "fix": "Validate file paths/permissions.", "line": 44, "reward": 0.5}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "File append without validation", "severity": "Medium", "problem_line": "with open(\"audit.log\", \"a\") as f:", "fix": "Validate file paths/permissions.", "line": 97, "reward": 0.5}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "Hardcoded secret/token", "severity": "High", "problem_line": "secret = \"TopSecretData\"", "fix": "Move secrets to environment variables or a secrets manager.", "line": 136, "reward": 1.0}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "Use of MD5", "severity": "Medium", "problem_line": "return hashlib.md5(password.encode()).hexdigest()  # Weak hashing", "fix": "Use SHA-256 or stronger hashing.", "line": 66, "reward": 0.5}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "TLS verification disabled", "severity": "High", "problem_line": "response = requests.post(url, data=payload, verify=False)", "fix": "Do not disable TLS verification in production.", "line": 79, "reward": 1.0}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "return pickle.load(f)", "fix": "Avoid deserializing untrusted input.", "line": 34, "reward": 1.0}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "return yaml.load(f, Loader=yaml.Loader)  # Unsafe YAML deserialization", "fix": "Avoid deserializing untrusted input.", "line": 41, "reward": 1.0}}
{"file": "code_samples/python_samples/p6.py", "language": "Python", "finding": {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null, "reward": 1.0}}
{"file": "code_samples/python_samples/p7.py", "language": "Python", "finding": {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "return pickle.loads(serialized)", "fix": "Do not unpickle untrusted data.", "line": 35, "reward": 1.0}}
{"file": "code_samples/python_samples/p7.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "return pickle.loads(serialized)", "fix": "Avoid deserializing untrusted input.", "line": 35, "reward": 1.0}}
{"file": "code_samples/python_samples/python_test1.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(input)  # unsafe", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 3, "reward": 1.0}}
{"file": "code_samples/python_samples/py_multi1.py", "language": "Python", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(user_code)  # unsafe eval", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 5, "reward": 1.0}}
{"file": "code_samples/python_samples/py_multi1.py", "language": "Python", "finding": {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(code)  # unsafe exec", "fix": "Avoid exec(); restrict execution or remove.", "line": 8, "reward": 1.0}}
{"file": "code_samples/python_samples/py_multi1.py", "language": "Python", "finding": {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.loads(b\"cos\\nsystem\\n(S'ls'\\ntR.\")  # unsafe deserialization", "fix": "Do not unpickle untrusted data.", "line": 13, "reward": 1.0}}
{"file": "code_samples/python_samples/py_multi1.py", "language": "Python", "finding": {"type": "TLS verification disabled", "severity": "High", "problem_line": "requests.get(\"https://example.com\", verify=False)  # disables SSL verification", "fix": "Enable certificate verification.", "line": 16, "reward": 1.0}}
{"file": "code_samples/python_samples/py_multi1.py", "language": "Python", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "password = \"123456\"  # hardcoded password", "fix": "Do not store passwords in source code.", "line": 10, "reward": 1.0}}
{"file": "code_samples/python_samples/py_multi1.py", "language": "Python", "finding": {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.loads(b\"cos\\nsystem\\n(S'ls'\\ntR.\")  # unsafe deserialization", "fix": "Avoid deserializing untrusted input.", "line": 13, "reward": 1.0}}
{"file": "code_samples/python_samples/py_multi1.py", "language": "Python", "finding": {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null, "reward": 1.0}}
{"file": "code_samples/python_samples/py_multi2.py", "language": "Python", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/python_samples/sql_injection1.py", "language": "Python", "finding": {"type": "Hardcoded password", "severity": "High", "problem_line": "password = input(\"Enter password: \")", "fix": "Do not store passwords in source code.", "line": 7, "reward": 1.0}}
{"file": "code_samples/python_samples/sql_injection2.py", "language": "Python", "finding": {"note": "No obvious issues found.", "reward": 0.5}}
{"file": "code_samples/Ruby/r1.rb", "language": "Ruby", "finding": {"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(code)", "fix": "Avoid eval; use safer parsing.", "line": 12, "reward": 1.0}}
{"file": "code_samples/Ruby/r1.rb", "language": "Ruby", "finding": {"type": "system() execution", "severity": "High", "problem_line": "system(cmd)", "fix": "Sanitize inputs before executing system calls.", "line": 7, "reward": 1.0}}
{"file": "code_samples/Ruby/r1.rb", "language": "Ruby", "finding": {"type": "File read", "severity": "Medium", "problem_line": "return File.read(path).strip", "fix": "Validate paths; avoid sensitive file exposure.", "line": 19, "reward": 0.5}}
