{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c++_tests/good1.c++", "language": "C++", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 2852, "line_count": 95}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c++_tests/test_bad.c++", "language": "C++", "findings": [{"type": "Hardcoded secret/token", "severity": "High", "problem_line": "std::string apiKey = \"API_KEY_12345\";", "fix": "Move secrets to environment variables or a secrets manager.", "line": 17}], "severity_summary": {"High": 1}, "file_size": 412, "line_count": 20}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c_tests/bad_test.c", "language": "C", "findings": [{"type": "Unsafe gets", "severity": "High", "problem_line": "// Vulnerability 1: Buffer overflow with gets()", "fix": "Use fgets with size limits.", "line": 24}, {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(input);  // unsafe", "fix": "Use fgets with size limits.", "line": 26}, {"type": "Unsafe sprintf", "severity": "High", "problem_line": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "fix": "Use snprintf with buffer limits.", "line": 34}, {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[0].username, input, sizeof(users[0].username)); // okay but overflow already possible", "fix": "Ensure null-termination.", "line": 28}], "severity_summary": {"High": 3, "Low": 1}, "file_size": 857, "line_count": 40}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c_tests/safe_test.c", "language": "C", "findings": [{"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[*count].username, username, sizeof(users[*count].username) - 1);", "fix": "Ensure null-termination.", "line": 22}], "severity_summary": {"Low": 1}, "file_size": 1368, "line_count": 58}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/Bad_Test1.java", "language": "Java", "findings": [{"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 33}], "severity_summary": {"High": 1}, "file_size": 2146, "line_count": 72}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/SafeTest1.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 1492, "line_count": 56}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/BadTest1.java", "language": "Java", "findings": [{"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 8}], "severity_summary": {"High": 1}, "file_size": 495, "line_count": 14}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/BadTest2.java", "language": "Java", "findings": [{"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(code);", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 17}], "severity_summary": {"High": 1}, "file_size": 513, "line_count": 19}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/GoodTest1.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 302, "line_count": 10}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/GoodTest2.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 524, "line_count": 15}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/GoodTest3.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 411, "line_count": 11}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest1.php", "language": "PHP", "findings": [{"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 4}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$u = $_POST['username'];", "fix": "Validate and sanitize all user input.", "line": 5}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$p = $_POST['password'];", "fix": "Validate and sanitize all user input.", "line": 6}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Query: $query\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 8}], "severity_summary": {"High": 3, "Medium": 1}, "file_size": 358, "line_count": 14}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest2.php", "language": "PHP", "findings": [{"type": "File read", "severity": "Medium", "problem_line": "$content = file_get_contents($filename); // unsafe: path traversal", "fix": "Validate input paths to prevent local file disclosure.", "line": 6}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['file'])){", "fix": "Validate and sanitize all user input.", "line": 4}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$filename = $_GET['file'];", "fix": "Validate and sanitize all user input.", "line": 5}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $content;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 7}, {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Avoid unserializing untrusted data.", "line": 11}, {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "if(isset($_COOKIE['prefs'])){", "fix": "Validate cookie data before use.", "line": 10}, {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Validate cookie data before use.", "line": 11}], "severity_summary": {"Medium": 4, "High": 3}, "file_size": 316, "line_count": 13}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/GoodTest1.php", "language": "PHP", "findings": [{"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 8}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$stmt->bind_param(\"ss\", $_POST['username'], $_POST['password']); // safe", "fix": "Validate and sanitize all user input.", "line": 10}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login successful!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login failed!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 16}], "severity_summary": {"High": 2, "Medium": 2}, "file_size": 673, "line_count": 23}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/GoodTest2.php", "language": "PHP", "findings": [{"type": "File read", "severity": "Medium", "problem_line": "if(file_exists($path)) return json_decode(file_get_contents($path), true);", "fix": "Validate input paths to prevent local file disclosure.", "line": 14}, {"type": "File upload risk", "severity": "High", "problem_line": "move_uploaded_file($file['tmp_name'], $uploadDir.$filename);", "fix": "Validate file type and path before moving.", "line": 9}], "severity_summary": {"Medium": 1, "High": 1}, "file_size": 383, "line_count": 17}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/MixedTest1.php", "language": "PHP", "findings": [{"type": "Shell execution (shell_exec)", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Avoid shell_exec; sanitize inputs.", "line": 13}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['cmd'])){", "fix": "Validate and sanitize all user input.", "line": 12}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Validate and sanitize all user input.", "line": 13}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $output;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14}, {"type": "Hardcoded credentials", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Use environment variables.", "line": 22}, {"type": "Hardcoded password", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Do not store passwords in source code.", "line": 22}], "severity_summary": {"High": 5, "Medium": 1}, "file_size": 519, "line_count": 23}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/Bad_Test1.py", "language": "Python", "findings": [{"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 15}, {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid exec(); restrict execution or remove.", "line": 20}, {"type": "subprocess(..., shell=True)", "severity": "High", "problem_line": "subprocess.run(cmd, shell=True)  # shell=True is unsafe", "fix": "Use list args and avoid shell=True.", "line": 39}, {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Do not unpickle untrusted data.", "line": 33}, {"type": "TLS verification disabled", "severity": "High", "problem_line": "r = requests.get(\"https://example.com\", verify=False)  # TLS verification disabled", "fix": "Enable certificate verification.", "line": 43}, {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Avoid deserializing untrusted input.", "line": 33}, {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid using eval; sanitize inputs.", "line": 15}, {"type": "AST Unsafe exec", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid using exec; sanitize inputs.", "line": 20}], "severity_summary": {"High": 9}, "file_size": 2265, "line_count": 77}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/test.py", "language": "Python", "findings": [{"type": "Unsafe eval()", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 5}, {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 14}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid using eval; sanitize inputs.", "line": 5}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid using eval; sanitize inputs.", "line": 14}], "severity_summary": {"High": 4}, "file_size": 501, "line_count": 22}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c++_tests/good1.c++", "language": "C++", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 2852, "line_count": 95}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c++_tests/test_bad.c++", "language": "C++", "findings": [{"type": "Hardcoded secret/token", "severity": "High", "problem_line": "std::string apiKey = \"API_KEY_12345\";", "fix": "Move secrets to environment variables or a secrets manager.", "line": 17}], "severity_summary": {"High": 1}, "file_size": 412, "line_count": 20}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c_tests/bad_test.c", "language": "C", "findings": [{"type": "Unsafe gets", "severity": "High", "problem_line": "// Vulnerability 1: Buffer overflow with gets()", "fix": "Use fgets with size limits.", "line": 24}, {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(input);  // unsafe", "fix": "Use fgets with size limits.", "line": 26}, {"type": "Unsafe sprintf", "severity": "High", "problem_line": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "fix": "Use snprintf with buffer limits.", "line": 34}, {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[0].username, input, sizeof(users[0].username)); // okay but overflow already possible", "fix": "Ensure null-termination.", "line": 28}], "severity_summary": {"High": 3, "Low": 1}, "file_size": 857, "line_count": 40}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c_tests/safe_test.c", "language": "C", "findings": [{"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[*count].username, username, sizeof(users[*count].username) - 1);", "fix": "Ensure null-termination.", "line": 22}], "severity_summary": {"Low": 1}, "file_size": 1368, "line_count": 58}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/Bad_Test1.java", "language": "Java", "findings": [{"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 33}], "severity_summary": {"High": 1}, "file_size": 2146, "line_count": 72}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/SafeTest1.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 1492, "line_count": 56}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/BadTest1.java", "language": "Java", "findings": [{"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 8}], "severity_summary": {"High": 1}, "file_size": 495, "line_count": 14}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/BadTest2.java", "language": "Java", "findings": [{"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(code);", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 17}], "severity_summary": {"High": 1}, "file_size": 513, "line_count": 19}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/GoodTest1.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 302, "line_count": 10}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/GoodTest2.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 524, "line_count": 15}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/GoodTest3.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 411, "line_count": 11}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest1.php", "language": "PHP", "findings": [{"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 4}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$u = $_POST['username'];", "fix": "Validate and sanitize all user input.", "line": 5}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$p = $_POST['password'];", "fix": "Validate and sanitize all user input.", "line": 6}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Query: $query\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 8}], "severity_summary": {"High": 3, "Medium": 1}, "file_size": 358, "line_count": 14}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest2.php", "language": "PHP", "findings": [{"type": "File read", "severity": "Medium", "problem_line": "$content = file_get_contents($filename); // unsafe: path traversal", "fix": "Validate input paths to prevent local file disclosure.", "line": 6}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['file'])){", "fix": "Validate and sanitize all user input.", "line": 4}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$filename = $_GET['file'];", "fix": "Validate and sanitize all user input.", "line": 5}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $content;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 7}, {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Avoid unserializing untrusted data.", "line": 11}, {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "if(isset($_COOKIE['prefs'])){", "fix": "Validate cookie data before use.", "line": 10}, {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Validate cookie data before use.", "line": 11}], "severity_summary": {"Medium": 4, "High": 3}, "file_size": 316, "line_count": 13}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/GoodTest1.php", "language": "PHP", "findings": [{"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 8}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$stmt->bind_param(\"ss\", $_POST['username'], $_POST['password']); // safe", "fix": "Validate and sanitize all user input.", "line": 10}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login successful!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login failed!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 16}], "severity_summary": {"High": 2, "Medium": 2}, "file_size": 673, "line_count": 23}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/GoodTest2.php", "language": "PHP", "findings": [{"type": "File read", "severity": "Medium", "problem_line": "if(file_exists($path)) return json_decode(file_get_contents($path), true);", "fix": "Validate input paths to prevent local file disclosure.", "line": 14}, {"type": "File upload risk", "severity": "High", "problem_line": "move_uploaded_file($file['tmp_name'], $uploadDir.$filename);", "fix": "Validate file type and path before moving.", "line": 9}], "severity_summary": {"Medium": 1, "High": 1}, "file_size": 383, "line_count": 17}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/MixedTest1.php", "language": "PHP", "findings": [{"type": "Shell execution (shell_exec)", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Avoid shell_exec; sanitize inputs.", "line": 13}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['cmd'])){", "fix": "Validate and sanitize all user input.", "line": 12}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Validate and sanitize all user input.", "line": 13}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $output;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14}, {"type": "Hardcoded credentials", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Use environment variables.", "line": 22}, {"type": "Hardcoded password", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Do not store passwords in source code.", "line": 22}], "severity_summary": {"High": 5, "Medium": 1}, "file_size": 519, "line_count": 23}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/Bad_Test1.py", "language": "Python", "findings": [{"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 15}, {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid exec(); restrict execution or remove.", "line": 20}, {"type": "subprocess(..., shell=True)", "severity": "High", "problem_line": "subprocess.run(cmd, shell=True)  # shell=True is unsafe", "fix": "Use list args and avoid shell=True.", "line": 39}, {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Do not unpickle untrusted data.", "line": 33}, {"type": "TLS verification disabled", "severity": "High", "problem_line": "r = requests.get(\"https://example.com\", verify=False)  # TLS verification disabled", "fix": "Enable certificate verification.", "line": 43}, {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Avoid deserializing untrusted input.", "line": 33}, {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid using eval; sanitize inputs.", "line": 15}, {"type": "AST Unsafe exec", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid using exec; sanitize inputs.", "line": 20}], "severity_summary": {"High": 9}, "file_size": 2265, "line_count": 77}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/test.py", "language": "Python", "findings": [{"type": "Unsafe eval()", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 5}, {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 14}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid using eval; sanitize inputs.", "line": 5}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid using eval; sanitize inputs.", "line": 14}], "severity_summary": {"High": 4}, "file_size": 501, "line_count": 22}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c++_tests/good1.c++", "language": "C++", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 2852, "line_count": 95}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c++_tests/test_bad.c++", "language": "C++", "findings": [{"type": "Hardcoded secret/token", "severity": "High", "problem_line": "std::string apiKey = \"API_KEY_12345\";", "fix": "Move secrets to environment variables or a secrets manager.", "line": 17}], "severity_summary": {"High": 1}, "file_size": 412, "line_count": 20}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c_tests/bad_test.c", "language": "C", "findings": [{"type": "Unsafe gets", "severity": "High", "problem_line": "// Vulnerability 1: Buffer overflow with gets()", "fix": "Use fgets with size limits.", "line": 24}, {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(input);  // unsafe", "fix": "Use fgets with size limits.", "line": 26}, {"type": "Unsafe sprintf", "severity": "High", "problem_line": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "fix": "Use snprintf with buffer limits.", "line": 34}, {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[0].username, input, sizeof(users[0].username)); // okay but overflow already possible", "fix": "Ensure null-termination.", "line": 28}], "severity_summary": {"High": 3, "Low": 1}, "file_size": 857, "line_count": 40}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c_tests/safe_test.c", "language": "C", "findings": [{"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[*count].username, username, sizeof(users[*count].username) - 1);", "fix": "Ensure null-termination.", "line": 22}], "severity_summary": {"Low": 1}, "file_size": 1368, "line_count": 58}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/Bad_Test1.java", "language": "Java", "findings": [{"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 33}], "severity_summary": {"High": 1}, "file_size": 2146, "line_count": 72}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/SafeTest1.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 1492, "line_count": 56}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/BadTest1.java", "language": "Java", "findings": [{"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 8}], "severity_summary": {"High": 1}, "file_size": 495, "line_count": 14}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/BadTest2.java", "language": "Java", "findings": [{"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(code);", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 17}], "severity_summary": {"High": 1}, "file_size": 513, "line_count": 19}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/GoodTest1.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 302, "line_count": 10}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/GoodTest2.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 524, "line_count": 15}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/GoodTest3.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 411, "line_count": 11}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest1.php", "language": "PHP", "findings": [{"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 4}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$u = $_POST['username'];", "fix": "Validate and sanitize all user input.", "line": 5}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$p = $_POST['password'];", "fix": "Validate and sanitize all user input.", "line": 6}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Query: $query\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 8}], "severity_summary": {"High": 3, "Medium": 1}, "file_size": 358, "line_count": 14}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest2.php", "language": "PHP", "findings": [{"type": "File read", "severity": "Medium", "problem_line": "$content = file_get_contents($filename); // unsafe: path traversal", "fix": "Validate input paths to prevent local file disclosure.", "line": 6}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['file'])){", "fix": "Validate and sanitize all user input.", "line": 4}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$filename = $_GET['file'];", "fix": "Validate and sanitize all user input.", "line": 5}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $content;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 7}, {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Avoid unserializing untrusted data.", "line": 11}, {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "if(isset($_COOKIE['prefs'])){", "fix": "Validate cookie data before use.", "line": 10}, {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Validate cookie data before use.", "line": 11}], "severity_summary": {"Medium": 4, "High": 3}, "file_size": 316, "line_count": 13}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/GoodTest1.php", "language": "PHP", "findings": [{"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 8}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$stmt->bind_param(\"ss\", $_POST['username'], $_POST['password']); // safe", "fix": "Validate and sanitize all user input.", "line": 10}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login successful!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login failed!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 16}], "severity_summary": {"High": 2, "Medium": 2}, "file_size": 673, "line_count": 23}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/GoodTest2.php", "language": "PHP", "findings": [{"type": "File read", "severity": "Medium", "problem_line": "if(file_exists($path)) return json_decode(file_get_contents($path), true);", "fix": "Validate input paths to prevent local file disclosure.", "line": 14}, {"type": "File upload risk", "severity": "High", "problem_line": "move_uploaded_file($file['tmp_name'], $uploadDir.$filename);", "fix": "Validate file type and path before moving.", "line": 9}], "severity_summary": {"Medium": 1, "High": 1}, "file_size": 383, "line_count": 17}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/MixedTest1.php", "language": "PHP", "findings": [{"type": "Shell execution (shell_exec)", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Avoid shell_exec; sanitize inputs.", "line": 13}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['cmd'])){", "fix": "Validate and sanitize all user input.", "line": 12}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Validate and sanitize all user input.", "line": 13}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $output;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14}, {"type": "Hardcoded credentials", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Use environment variables.", "line": 22}, {"type": "Hardcoded password", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Do not store passwords in source code.", "line": 22}], "severity_summary": {"High": 5, "Medium": 1}, "file_size": 519, "line_count": 23}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/Bad_Test1.py", "language": "Python", "findings": [{"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 15}, {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid exec(); restrict execution or remove.", "line": 20}, {"type": "subprocess(..., shell=True)", "severity": "High", "problem_line": "subprocess.run(cmd, shell=True)  # shell=True is unsafe", "fix": "Use list args and avoid shell=True.", "line": 39}, {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Do not unpickle untrusted data.", "line": 33}, {"type": "TLS verification disabled", "severity": "High", "problem_line": "r = requests.get(\"https://example.com\", verify=False)  # TLS verification disabled", "fix": "Enable certificate verification.", "line": 43}, {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Avoid deserializing untrusted input.", "line": 33}, {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid using eval; sanitize inputs.", "line": 15}, {"type": "AST Unsafe exec", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid using exec; sanitize inputs.", "line": 20}], "severity_summary": {"High": 9}, "file_size": 2265, "line_count": 77}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/test.py", "language": "Python", "findings": [{"type": "Unsafe eval()", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 5}, {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 14}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid using eval; sanitize inputs.", "line": 5}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid using eval; sanitize inputs.", "line": 14}], "severity_summary": {"High": 4}, "file_size": 501, "line_count": 22}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c++_tests/good1.c++", "language": "C++", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 2852, "line_count": 95}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c++_tests/test_bad.c++", "language": "C++", "findings": [{"type": "Hardcoded secret/token", "severity": "High", "problem_line": "std::string apiKey = \"API_KEY_12345\";", "fix": "Move secrets to environment variables or a secrets manager.", "line": 17}], "severity_summary": {"High": 1}, "file_size": 412, "line_count": 20}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c_tests/bad_test.c", "language": "C", "findings": [{"type": "Unsafe gets", "severity": "High", "problem_line": "// Vulnerability 1: Buffer overflow with gets()", "fix": "Use fgets with size limits.", "line": 24}, {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(input);  // unsafe", "fix": "Use fgets with size limits.", "line": 26}, {"type": "Unsafe sprintf", "severity": "High", "problem_line": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "fix": "Use snprintf with buffer limits.", "line": 34}, {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[0].username, input, sizeof(users[0].username)); // okay but overflow already possible", "fix": "Ensure null-termination.", "line": 28}], "severity_summary": {"High": 3, "Low": 1}, "file_size": 857, "line_count": 40}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/c_tests/safe_test.c", "language": "C", "findings": [{"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[*count].username, username, sizeof(users[*count].username) - 1);", "fix": "Ensure null-termination.", "line": 22}], "severity_summary": {"Low": 1}, "file_size": 1368, "line_count": 58}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/Bad_Test1.java", "language": "Java", "findings": [{"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 33}], "severity_summary": {"High": 1}, "file_size": 2146, "line_count": 72}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/SafeTest1.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 1492, "line_count": 56}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/BadTest1.java", "language": "Java", "findings": [{"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 8}], "severity_summary": {"High": 1}, "file_size": 495, "line_count": 14}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/BadTest2.java", "language": "Java", "findings": [{"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(code);", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 17}], "severity_summary": {"High": 1}, "file_size": 513, "line_count": 19}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/GoodTest1.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 302, "line_count": 10}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/GoodTest2.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 524, "line_count": 15}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/java_tests/java_test_project/GoodTest3.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 411, "line_count": 11}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest1.php", "language": "PHP", "findings": [{"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 4}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$u = $_POST['username'];", "fix": "Validate and sanitize all user input.", "line": 5}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$p = $_POST['password'];", "fix": "Validate and sanitize all user input.", "line": 6}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Query: $query\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 8}], "severity_summary": {"High": 3, "Medium": 1}, "file_size": 358, "line_count": 14}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/BadTest2.php", "language": "PHP", "findings": [{"type": "File read", "severity": "Medium", "problem_line": "$content = file_get_contents($filename); // unsafe: path traversal", "fix": "Validate input paths to prevent local file disclosure.", "line": 6}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['file'])){", "fix": "Validate and sanitize all user input.", "line": 4}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$filename = $_GET['file'];", "fix": "Validate and sanitize all user input.", "line": 5}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $content;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 7}, {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Avoid unserializing untrusted data.", "line": 11}, {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "if(isset($_COOKIE['prefs'])){", "fix": "Validate cookie data before use.", "line": 10}, {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Validate cookie data before use.", "line": 11}], "severity_summary": {"Medium": 4, "High": 3}, "file_size": 316, "line_count": 13}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/GoodTest1.php", "language": "PHP", "findings": [{"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 8}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$stmt->bind_param(\"ss\", $_POST['username'], $_POST['password']); // safe", "fix": "Validate and sanitize all user input.", "line": 10}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login successful!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login failed!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 16}], "severity_summary": {"High": 2, "Medium": 2}, "file_size": 673, "line_count": 23}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/GoodTest2.php", "language": "PHP", "findings": [{"type": "File read", "severity": "Medium", "problem_line": "if(file_exists($path)) return json_decode(file_get_contents($path), true);", "fix": "Validate input paths to prevent local file disclosure.", "line": 14}, {"type": "File upload risk", "severity": "High", "problem_line": "move_uploaded_file($file['tmp_name'], $uploadDir.$filename);", "fix": "Validate file type and path before moving.", "line": 9}], "severity_summary": {"Medium": 1, "High": 1}, "file_size": 383, "line_count": 17}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/php_tests/MixedTest1.php", "language": "PHP", "findings": [{"type": "Shell execution (shell_exec)", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Avoid shell_exec; sanitize inputs.", "line": 13}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['cmd'])){", "fix": "Validate and sanitize all user input.", "line": 12}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Validate and sanitize all user input.", "line": 13}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $output;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14}, {"type": "Hardcoded credentials", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Use environment variables.", "line": 22}, {"type": "Hardcoded password", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Do not store passwords in source code.", "line": 22}], "severity_summary": {"High": 5, "Medium": 1}, "file_size": 519, "line_count": 23}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/Bad_Test1.py", "language": "Python", "findings": [{"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 15}, {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid exec(); restrict execution or remove.", "line": 20}, {"type": "subprocess(..., shell=True)", "severity": "High", "problem_line": "subprocess.run(cmd, shell=True)  # shell=True is unsafe", "fix": "Use list args and avoid shell=True.", "line": 39}, {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Do not unpickle untrusted data.", "line": 33}, {"type": "TLS verification disabled", "severity": "High", "problem_line": "r = requests.get(\"https://example.com\", verify=False)  # TLS verification disabled", "fix": "Enable certificate verification.", "line": 43}, {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Avoid deserializing untrusted input.", "line": 33}, {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid using eval; sanitize inputs.", "line": 15}, {"type": "AST Unsafe exec", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid using exec; sanitize inputs.", "line": 20}], "severity_summary": {"High": 9}, "file_size": 2265, "line_count": 77}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/tests/py_tests/test.py", "language": "Python", "findings": [{"type": "Unsafe eval()", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 5}, {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 14}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid using eval; sanitize inputs.", "line": 5}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid using eval; sanitize inputs.", "line": 14}], "severity_summary": {"High": 4}, "file_size": 501, "line_count": 22}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_c_tests_good1.c", "language": "C", "findings": [{"type": "Environment variable access", "severity": "Medium", "problem_line": "const char* api_key = std::getenv(\"API_KEY\");", "fix": "Validate input; avoid exposing secrets.", "line": 85}], "severity_summary": {"Medium": 1}, "file_size": 2852, "line_count": 95}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_c_tests_test_bad.c", "language": "C", "findings": [{"type": "Hardcoded secret/token", "severity": "High", "problem_line": "std::string apiKey = \"API_KEY_12345\";", "fix": "Move secrets to environment variables or a secrets manager.", "line": 17}], "severity_summary": {"High": 1}, "file_size": 412, "line_count": 20}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_c_tests_good1.c", "language": "C", "findings": [{"type": "Environment variable access", "severity": "Medium", "problem_line": "const char* api_key = std::getenv(\"API_KEY\");", "fix": "Validate input; avoid exposing secrets.", "line": 85}], "severity_summary": {"Medium": 1}, "file_size": 2852, "line_count": 95}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_c_tests_test_bad.c", "language": "C", "findings": [{"type": "Hardcoded secret/token", "severity": "High", "problem_line": "std::string apiKey = \"API_KEY_12345\";", "fix": "Move secrets to environment variables or a secrets manager.", "line": 17}], "severity_summary": {"High": 1}, "file_size": 412, "line_count": 20}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_c_tests_bad_test.c", "language": "C", "findings": [{"type": "Unsafe gets", "severity": "High", "problem_line": "// Vulnerability 1: Buffer overflow with gets()", "fix": "Use fgets with size limits.", "line": 24}, {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(input);  // unsafe", "fix": "Use fgets with size limits.", "line": 26}, {"type": "Unsafe sprintf", "severity": "High", "problem_line": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "fix": "Use snprintf with buffer limits.", "line": 34}, {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[0].username, input, sizeof(users[0].username)); // okay but overflow already possible", "fix": "Ensure null-termination.", "line": 28}], "severity_summary": {"High": 3, "Low": 1}, "file_size": 857, "line_count": 40}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_c_tests_bad_test.c", "language": "C", "findings": [{"type": "Unsafe gets", "severity": "High", "problem_line": "// Vulnerability 1: Buffer overflow with gets()", "fix": "Use fgets with size limits.", "line": 24}, {"type": "Unsafe gets", "severity": "High", "problem_line": "gets(input);  // unsafe", "fix": "Use fgets with size limits.", "line": 26}, {"type": "Unsafe sprintf", "severity": "High", "problem_line": "sprintf(cmd, \"echo Hello %s\", users[0].username); // vulnerable to injection", "fix": "Use snprintf with buffer limits.", "line": 34}, {"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[0].username, input, sizeof(users[0].username)); // okay but overflow already possible", "fix": "Ensure null-termination.", "line": 28}], "severity_summary": {"High": 3, "Low": 1}, "file_size": 857, "line_count": 40}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_c_tests_safe_test.c", "language": "C", "findings": [{"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[*count].username, username, sizeof(users[*count].username) - 1);", "fix": "Ensure null-termination.", "line": 22}], "severity_summary": {"Low": 1}, "file_size": 1368, "line_count": 58}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_Bad_Test1.java", "language": "Java", "findings": [{"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 33}], "severity_summary": {"High": 1}, "file_size": 2146, "line_count": 72}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_c_tests_safe_test.c", "language": "C", "findings": [{"type": "strncpy usage", "severity": "Low", "problem_line": "strncpy(users[*count].username, username, sizeof(users[*count].username) - 1);", "fix": "Ensure null-termination.", "line": 22}], "severity_summary": {"Low": 1}, "file_size": 1368, "line_count": 58}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_Bad_Test1.java", "language": "Java", "findings": [{"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + input + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 33}], "severity_summary": {"High": 1}, "file_size": 2146, "line_count": 72}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_java_test_project_BadTest1.java", "language": "Java", "findings": [{"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 8}], "severity_summary": {"High": 1}, "file_size": 495, "line_count": 14}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_java_test_project_BadTest1.java", "language": "Java", "findings": [{"type": "Possible SQL Injection", "severity": "High", "problem_line": "String query = \"SELECT * FROM users WHERE username = '\" + username + \"';\";", "fix": "Use prepared statements instead of string concatenation.", "line": 8}], "severity_summary": {"High": 1}, "file_size": 495, "line_count": 14}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_java_test_project_BadTest2.java", "language": "Java", "findings": [{"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(code);", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 17}], "severity_summary": {"High": 1}, "file_size": 513, "line_count": 19}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_java_test_project_BadTest2.java", "language": "Java", "findings": [{"type": "Runtime.exec() usage", "severity": "High", "problem_line": "Runtime.getRuntime().exec(code);", "fix": "Avoid dynamic command execution; sanitize inputs.", "line": 17}], "severity_summary": {"High": 1}, "file_size": 513, "line_count": 19}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_java_test_project_GoodTest1.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 302, "line_count": 10}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_java_test_project_GoodTest1.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 302, "line_count": 10}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_java_test_project_GoodTest2.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 524, "line_count": 15}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_java_test_project_GoodTest3.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 411, "line_count": 11}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_java_test_project_GoodTest2.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 524, "line_count": 15}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_SafeTest1.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 1492, "line_count": 56}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_java_test_project_GoodTest3.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 411, "line_count": 11}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_BadTest1.php", "language": "PHP", "findings": [{"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 4}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$u = $_POST['username'];", "fix": "Validate and sanitize all user input.", "line": 5}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$p = $_POST['password'];", "fix": "Validate and sanitize all user input.", "line": 6}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Query: $query\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 8}], "severity_summary": {"High": 3, "Medium": 1}, "file_size": 358, "line_count": 14}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_java_tests_SafeTest1.java", "language": "Java", "findings": [{"note": "No obvious issues found."}], "severity_summary": {"Note": 1}, "file_size": 1492, "line_count": 56}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_BadTest1.php", "language": "PHP", "findings": [{"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 4}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$u = $_POST['username'];", "fix": "Validate and sanitize all user input.", "line": 5}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$p = $_POST['password'];", "fix": "Validate and sanitize all user input.", "line": 6}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Query: $query\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 8}], "severity_summary": {"High": 3, "Medium": 1}, "file_size": 358, "line_count": 14}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_BadTest2.php", "language": "PHP", "findings": [{"type": "File read", "severity": "Medium", "problem_line": "$content = file_get_contents($filename); // unsafe: path traversal", "fix": "Validate input paths to prevent local file disclosure.", "line": 6}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['file'])){", "fix": "Validate and sanitize all user input.", "line": 4}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$filename = $_GET['file'];", "fix": "Validate and sanitize all user input.", "line": 5}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $content;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 7}, {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Avoid unserializing untrusted data.", "line": 11}, {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "if(isset($_COOKIE['prefs'])){", "fix": "Validate cookie data before use.", "line": 10}, {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Validate cookie data before use.", "line": 11}], "severity_summary": {"Medium": 4, "High": 3}, "file_size": 316, "line_count": 13}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_BadTest2.php", "language": "PHP", "findings": [{"type": "File read", "severity": "Medium", "problem_line": "$content = file_get_contents($filename); // unsafe: path traversal", "fix": "Validate input paths to prevent local file disclosure.", "line": 6}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['file'])){", "fix": "Validate and sanitize all user input.", "line": 4}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$filename = $_GET['file'];", "fix": "Validate and sanitize all user input.", "line": 5}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $content;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 7}, {"type": "Unsafe deserialization", "severity": "High", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Avoid unserializing untrusted data.", "line": 11}, {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "if(isset($_COOKIE['prefs'])){", "fix": "Validate cookie data before use.", "line": 10}, {"type": "Unvalidated cookie", "severity": "Medium", "problem_line": "$prefs = unserialize($_COOKIE['prefs']); // unsafe deserialization", "fix": "Validate cookie data before use.", "line": 11}], "severity_summary": {"Medium": 4, "High": 3}, "file_size": 316, "line_count": 13}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_GoodTest1.php", "language": "PHP", "findings": [{"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 8}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$stmt->bind_param(\"ss\", $_POST['username'], $_POST['password']); // safe", "fix": "Validate and sanitize all user input.", "line": 10}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login successful!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login failed!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 16}], "severity_summary": {"High": 2, "Medium": 2}, "file_size": 673, "line_count": 23}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_GoodTest1.php", "language": "PHP", "findings": [{"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_POST['username']) && isset($_POST['password'])){", "fix": "Validate and sanitize all user input.", "line": 8}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$stmt->bind_param(\"ss\", $_POST['username'], $_POST['password']); // safe", "fix": "Validate and sanitize all user input.", "line": 10}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login successful!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo \"Login failed!\";", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 16}], "severity_summary": {"High": 2, "Medium": 2}, "file_size": 673, "line_count": 23}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_GoodTest2.php", "language": "PHP", "findings": [{"type": "File read", "severity": "Medium", "problem_line": "if(file_exists($path)) return json_decode(file_get_contents($path), true);", "fix": "Validate input paths to prevent local file disclosure.", "line": 14}, {"type": "File upload risk", "severity": "High", "problem_line": "move_uploaded_file($file['tmp_name'], $uploadDir.$filename);", "fix": "Validate file type and path before moving.", "line": 9}], "severity_summary": {"Medium": 1, "High": 1}, "file_size": 383, "line_count": 17}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_GoodTest2.php", "language": "PHP", "findings": [{"type": "File read", "severity": "Medium", "problem_line": "if(file_exists($path)) return json_decode(file_get_contents($path), true);", "fix": "Validate input paths to prevent local file disclosure.", "line": 14}, {"type": "File upload risk", "severity": "High", "problem_line": "move_uploaded_file($file['tmp_name'], $uploadDir.$filename);", "fix": "Validate file type and path before moving.", "line": 9}], "severity_summary": {"Medium": 1, "High": 1}, "file_size": 383, "line_count": 17}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_MixedTest1.php", "language": "PHP", "findings": [{"type": "Shell execution (shell_exec)", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Avoid shell_exec; sanitize inputs.", "line": 13}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['cmd'])){", "fix": "Validate and sanitize all user input.", "line": 12}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Validate and sanitize all user input.", "line": 13}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $output;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14}, {"type": "Hardcoded credentials", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Use environment variables.", "line": 22}, {"type": "Hardcoded password", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Do not store passwords in source code.", "line": 22}], "severity_summary": {"High": 5, "Medium": 1}, "file_size": 519, "line_count": 23}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_php_tests_MixedTest1.php", "language": "PHP", "findings": [{"type": "Shell execution (shell_exec)", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Avoid shell_exec; sanitize inputs.", "line": 13}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "if(isset($_GET['cmd'])){", "fix": "Validate and sanitize all user input.", "line": 12}, {"type": "Unvalidated user input", "severity": "High", "problem_line": "$output = shell_exec($_GET['cmd']); // command execution", "fix": "Validate and sanitize all user input.", "line": 13}, {"type": "Potential XSS risk", "severity": "Medium", "problem_line": "echo $output;", "fix": "Escape HTML output using htmlspecialchars or equivalent.", "line": 14}, {"type": "Hardcoded credentials", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Use environment variables.", "line": 22}, {"type": "Hardcoded password", "severity": "High", "problem_line": "$password = \"password123\";", "fix": "Do not store passwords in source code.", "line": 22}], "severity_summary": {"High": 5, "Medium": 1}, "file_size": 519, "line_count": 23}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_py_tests_Bad_Test1.py", "language": "Python", "findings": [{"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 15}, {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid exec(); restrict execution or remove.", "line": 20}, {"type": "subprocess(..., shell=True)", "severity": "High", "problem_line": "subprocess.run(cmd, shell=True)  # shell=True is unsafe", "fix": "Use list args and avoid shell=True.", "line": 39}, {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Do not unpickle untrusted data.", "line": 33}, {"type": "TLS verification disabled", "severity": "High", "problem_line": "r = requests.get(\"https://example.com\", verify=False)  # TLS verification disabled", "fix": "Enable certificate verification.", "line": 43}, {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Avoid deserializing untrusted input.", "line": 33}, {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid using eval; sanitize inputs.", "line": 15}, {"type": "AST Unsafe exec", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid using exec; sanitize inputs.", "line": 20}], "severity_summary": {"High": 9}, "file_size": 2265, "line_count": 77}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_py_tests_Bad_Test1.py", "language": "Python", "findings": [{"type": "Unsafe eval()", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 15}, {"type": "Unsafe exec()", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid exec(); restrict execution or remove.", "line": 20}, {"type": "subprocess(..., shell=True)", "severity": "High", "problem_line": "subprocess.run(cmd, shell=True)  # shell=True is unsafe", "fix": "Use list args and avoid shell=True.", "line": 39}, {"type": "Unsafe pickle deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Do not unpickle untrusted data.", "line": 33}, {"type": "TLS verification disabled", "severity": "High", "problem_line": "r = requests.get(\"https://example.com\", verify=False)  # TLS verification disabled", "fix": "Enable certificate verification.", "line": 43}, {"type": "Unsafe deserialization", "severity": "High", "problem_line": "data = pickle.load(f)  # Unsafe if file is untrusted", "fix": "Avoid deserializing untrusted input.", "line": 33}, {"type": "Dependency: requests", "severity": "High", "problem_line": "Detected dependency reference to 'requests'", "fix": "Ensure TLS verification is enabled and certificates are validated.", "line": null}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "eval(user_code)  # Dangerous: arbitrary code execution", "fix": "Avoid using eval; sanitize inputs.", "line": 15}, {"type": "AST Unsafe exec", "severity": "High", "problem_line": "exec(command)  # Dangerous: arbitrary code execution", "fix": "Avoid using exec; sanitize inputs.", "line": 20}], "severity_summary": {"High": 9}, "file_size": 2265, "line_count": 77}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_py_tests_test.py", "language": "Python", "findings": [{"type": "Unsafe eval()", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 5}, {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 14}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid using eval; sanitize inputs.", "line": 5}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid using eval; sanitize inputs.", "line": 14}], "severity_summary": {"High": 4}, "file_size": 501, "line_count": 22}
{"file": "/mnt/c/Users/Owner/Downloads/ML_Project/Machine_Learning_Project-main/Machine_Learning_Project-main/uploads/tests_py_tests_test.py", "language": "Python", "findings": [{"type": "Unsafe eval()", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 5}, {"type": "Unsafe eval()", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid eval(); use ast.literal_eval or strict parsing.", "line": 14}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "print(\"Result of eval:\", eval(user_input))", "fix": "Avoid using eval; sanitize inputs.", "line": 5}, {"type": "AST Unsafe eval", "severity": "High", "problem_line": "print(eval(data))  # This is very unsafe!", "fix": "Avoid using eval; sanitize inputs.", "line": 14}], "severity_summary": {"High": 4}, "file_size": 501, "line_count": 22}
